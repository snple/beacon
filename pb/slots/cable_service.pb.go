// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.12.4
// source: slots/cable_service.proto

package slots

import (
	pb "github.com/snple/kokomi/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// cable
type CableListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page *pb.Page `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	// string device_id = 2;
	Tags string `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CableListRequest) Reset() {
	*x = CableListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_cable_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CableListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CableListRequest) ProtoMessage() {}

func (x *CableListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_slots_cable_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CableListRequest.ProtoReflect.Descriptor instead.
func (*CableListRequest) Descriptor() ([]byte, []int) {
	return file_slots_cable_service_proto_rawDescGZIP(), []int{0}
}

func (x *CableListRequest) GetPage() *pb.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *CableListRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *CableListRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type CableListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  *pb.Page    `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Count uint32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Cable []*pb.Cable `protobuf:"bytes,3,rep,name=cable,proto3" json:"cable,omitempty"`
}

func (x *CableListResponse) Reset() {
	*x = CableListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_cable_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CableListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CableListResponse) ProtoMessage() {}

func (x *CableListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_slots_cable_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CableListResponse.ProtoReflect.Descriptor instead.
func (*CableListResponse) Descriptor() ([]byte, []int) {
	return file_slots_cable_service_proto_rawDescGZIP(), []int{1}
}

func (x *CableListResponse) GetPage() *pb.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *CableListResponse) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *CableListResponse) GetCable() []*pb.Cable {
	if x != nil {
		return x.Cable
	}
	return nil
}

type CableLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status int32  `protobuf:"zigzag32,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *CableLinkRequest) Reset() {
	*x = CableLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_cable_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CableLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CableLinkRequest) ProtoMessage() {}

func (x *CableLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_slots_cable_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CableLinkRequest.ProtoReflect.Descriptor instead.
func (*CableLinkRequest) Descriptor() ([]byte, []int) {
	return file_slots_cable_service_proto_rawDescGZIP(), []int{2}
}

func (x *CableLinkRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CableLinkRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type CablePullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	After int64  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// string device_id = 3;
	Type string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CablePullRequest) Reset() {
	*x = CablePullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_cable_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CablePullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CablePullRequest) ProtoMessage() {}

func (x *CablePullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_slots_cable_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CablePullRequest.ProtoReflect.Descriptor instead.
func (*CablePullRequest) Descriptor() ([]byte, []int) {
	return file_slots_cable_service_proto_rawDescGZIP(), []int{3}
}

func (x *CablePullRequest) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *CablePullRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CablePullRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type CablePullResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	After int64       `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit uint32      `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Cable []*pb.Cable `protobuf:"bytes,3,rep,name=cable,proto3" json:"cable,omitempty"`
}

func (x *CablePullResponse) Reset() {
	*x = CablePullResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_cable_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CablePullResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CablePullResponse) ProtoMessage() {}

func (x *CablePullResponse) ProtoReflect() protoreflect.Message {
	mi := &file_slots_cable_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CablePullResponse.ProtoReflect.Descriptor instead.
func (*CablePullResponse) Descriptor() ([]byte, []int) {
	return file_slots_cable_service_proto_rawDescGZIP(), []int{4}
}

func (x *CablePullResponse) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *CablePullResponse) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *CablePullResponse) GetCable() []*pb.Cable {
	if x != nil {
		return x.Cable
	}
	return nil
}

// wire
type WireListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page *pb.Page `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	// string device_id = 2;
	CableId string `protobuf:"bytes,3,opt,name=cable_id,json=cableId,proto3" json:"cable_id,omitempty"`
	Tags    string `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
	Type    string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *WireListRequest) Reset() {
	*x = WireListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_cable_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WireListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireListRequest) ProtoMessage() {}

func (x *WireListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_slots_cable_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireListRequest.ProtoReflect.Descriptor instead.
func (*WireListRequest) Descriptor() ([]byte, []int) {
	return file_slots_cable_service_proto_rawDescGZIP(), []int{5}
}

func (x *WireListRequest) GetPage() *pb.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *WireListRequest) GetCableId() string {
	if x != nil {
		return x.CableId
	}
	return ""
}

func (x *WireListRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *WireListRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type WireListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page  *pb.Page   `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Count uint32     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Wire  []*pb.Wire `protobuf:"bytes,3,rep,name=wire,proto3" json:"wire,omitempty"`
}

func (x *WireListResponse) Reset() {
	*x = WireListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_cable_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WireListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireListResponse) ProtoMessage() {}

func (x *WireListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_slots_cable_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireListResponse.ProtoReflect.Descriptor instead.
func (*WireListResponse) Descriptor() ([]byte, []int) {
	return file_slots_cable_service_proto_rawDescGZIP(), []int{6}
}

func (x *WireListResponse) GetPage() *pb.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *WireListResponse) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *WireListResponse) GetWire() []*pb.Wire {
	if x != nil {
		return x.Wire
	}
	return nil
}

type WirePullRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	After int64  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// string device_id = 3;
	CableId string `protobuf:"bytes,4,opt,name=cable_id,json=cableId,proto3" json:"cable_id,omitempty"`
	Type    string `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *WirePullRequest) Reset() {
	*x = WirePullRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_cable_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WirePullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirePullRequest) ProtoMessage() {}

func (x *WirePullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_slots_cable_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirePullRequest.ProtoReflect.Descriptor instead.
func (*WirePullRequest) Descriptor() ([]byte, []int) {
	return file_slots_cable_service_proto_rawDescGZIP(), []int{7}
}

func (x *WirePullRequest) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *WirePullRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *WirePullRequest) GetCableId() string {
	if x != nil {
		return x.CableId
	}
	return ""
}

func (x *WirePullRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type WirePullResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	After int64      `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit uint32     `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Wire  []*pb.Wire `protobuf:"bytes,3,rep,name=wire,proto3" json:"wire,omitempty"`
}

func (x *WirePullResponse) Reset() {
	*x = WirePullResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_cable_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WirePullResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirePullResponse) ProtoMessage() {}

func (x *WirePullResponse) ProtoReflect() protoreflect.Message {
	mi := &file_slots_cable_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirePullResponse.ProtoReflect.Descriptor instead.
func (*WirePullResponse) Descriptor() ([]byte, []int) {
	return file_slots_cable_service_proto_rawDescGZIP(), []int{8}
}

func (x *WirePullResponse) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *WirePullResponse) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *WirePullResponse) GetWire() []*pb.Wire {
	if x != nil {
		return x.Wire
	}
	return nil
}

type WirePullValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	After int64  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// string device_id = 3;
	CableId string `protobuf:"bytes,4,opt,name=cable_id,json=cableId,proto3" json:"cable_id,omitempty"`
}

func (x *WirePullValueRequest) Reset() {
	*x = WirePullValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_cable_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WirePullValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirePullValueRequest) ProtoMessage() {}

func (x *WirePullValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_slots_cable_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirePullValueRequest.ProtoReflect.Descriptor instead.
func (*WirePullValueRequest) Descriptor() ([]byte, []int) {
	return file_slots_cable_service_proto_rawDescGZIP(), []int{9}
}

func (x *WirePullValueRequest) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *WirePullValueRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *WirePullValueRequest) GetCableId() string {
	if x != nil {
		return x.CableId
	}
	return ""
}

type WirePullValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	After int64                  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Wire  []*pb.WireValueUpdated `protobuf:"bytes,3,rep,name=wire,proto3" json:"wire,omitempty"`
}

func (x *WirePullValueResponse) Reset() {
	*x = WirePullValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_slots_cable_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WirePullValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirePullValueResponse) ProtoMessage() {}

func (x *WirePullValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_slots_cable_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirePullValueResponse.ProtoReflect.Descriptor instead.
func (*WirePullValueResponse) Descriptor() ([]byte, []int) {
	return file_slots_cable_service_proto_rawDescGZIP(), []int{10}
}

func (x *WirePullValueResponse) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *WirePullValueResponse) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *WirePullValueResponse) GetWire() []*pb.WireValueUpdated {
	if x != nil {
		return x.Wire
	}
	return nil
}

var File_slots_cable_service_proto protoreflect.FileDescriptor

var file_slots_cable_service_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2f, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x1a, 0x13, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x58,
	0x0a, 0x10, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x68, 0x0a, 0x11, 0x43, 0x61, 0x62, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1f, 0x0a, 0x05, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x63, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x3a, 0x0a, 0x10, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x52,
	0x0a, 0x10, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x60, 0x0a, 0x11, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x05, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x05, 0x63,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x72, 0x0a, 0x0f, 0x57, 0x69, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x64, 0x0a, 0x10, 0x57, 0x69, 0x72, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x04, 0x77, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x52, 0x04, 0x77, 0x69, 0x72, 0x65, 0x22, 0x6c,
	0x0a, 0x0f, 0x57, 0x69, 0x72, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x5c, 0x0a, 0x10,
	0x57, 0x69, 0x72, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x04,
	0x77, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e,
	0x57, 0x69, 0x72, 0x65, 0x52, 0x04, 0x77, 0x69, 0x72, 0x65, 0x22, 0x5d, 0x0a, 0x14, 0x57, 0x69,
	0x72, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x6d, 0x0a, 0x15, 0x57, 0x69, 0x72,
	0x65, 0x50, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28,
	0x0a, 0x04, 0x77, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70,
	0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x04, 0x77, 0x69, 0x72, 0x65, 0x32, 0xa0, 0x03, 0x0a, 0x0c, 0x43, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x06, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x09,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x20, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65,
	0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x1b, 0x0a,
	0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x09, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x1d, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x09, 0x2e, 0x70,
	0x62, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x1e, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x0a, 0x2e, 0x70, 0x62,
	0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x04, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x17, 0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x17,
	0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x0f, 0x56, 0x69, 0x65, 0x77, 0x57, 0x69, 0x74,
	0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64,
	0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a,
	0x04, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x17, 0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x43, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x75, 0x6c, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x1f, 0x0a, 0x04, 0x53, 0x79,
	0x6e, 0x63, 0x12, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x0a, 0x2e,
	0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xca, 0x06, 0x0a, 0x0b,
	0x57, 0x69, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x1a,
	0x08, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x22, 0x00, 0x12, 0x1e, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x1a,
	0x08, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x22, 0x00, 0x12, 0x1a, 0x0a, 0x04, 0x56,
	0x69, 0x65, 0x77, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x08, 0x2e, 0x70, 0x62,
	0x2e, 0x57, 0x69, 0x72, 0x65, 0x22, 0x00, 0x12, 0x1c, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x08, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x57,
	0x69, 0x72, 0x65, 0x22, 0x00, 0x12, 0x1e, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x57, 0x69,
	0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x23, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x06, 0x2e, 0x70,
	0x62, 0x2e, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x30,
	0x0a, 0x11, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x6e, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x64, 0x12, 0x0d, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00,
	0x12, 0x2f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x11, 0x2e, 0x70,
	0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x00, 0x12, 0x31, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x55, 0x6e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x12,
	0x11, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00,
	0x12, 0x25, 0x0a, 0x0f, 0x56, 0x69, 0x65, 0x77, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x08, 0x2e, 0x70, 0x62,
	0x2e, 0x57, 0x69, 0x72, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x04, 0x50, 0x75, 0x6c, 0x6c, 0x12,
	0x16, 0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x50, 0x75, 0x6c, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e,
	0x57, 0x69, 0x72, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x1e, 0x0a, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x08, 0x2e, 0x70, 0x62, 0x2e,
	0x57, 0x69, 0x72, 0x65, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x00, 0x12, 0x2b, 0x0a, 0x09, 0x56, 0x69, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x00, 0x12,
	0x23, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x06,
	0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x09, 0x50, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1b, 0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x50, 0x75,
	0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x28,
	0x0a, 0x09, 0x53, 0x79, 0x6e, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0d, 0x2e, 0x70, 0x62,
	0x2e, 0x57, 0x69, 0x72, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e,
	0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x70, 0x6c, 0x65, 0x2f, 0x6b, 0x6f, 0x6b,
	0x6f, 0x6d, 0x69, 0x2f, 0x70, 0x62, 0x2f, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x3b, 0x73, 0x6c, 0x6f,
	0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_slots_cable_service_proto_rawDescOnce sync.Once
	file_slots_cable_service_proto_rawDescData = file_slots_cable_service_proto_rawDesc
)

func file_slots_cable_service_proto_rawDescGZIP() []byte {
	file_slots_cable_service_proto_rawDescOnce.Do(func() {
		file_slots_cable_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_slots_cable_service_proto_rawDescData)
	})
	return file_slots_cable_service_proto_rawDescData
}

var file_slots_cable_service_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_slots_cable_service_proto_goTypes = []interface{}{
	(*CableListRequest)(nil),      // 0: slots.CableListRequest
	(*CableListResponse)(nil),     // 1: slots.CableListResponse
	(*CableLinkRequest)(nil),      // 2: slots.CableLinkRequest
	(*CablePullRequest)(nil),      // 3: slots.CablePullRequest
	(*CablePullResponse)(nil),     // 4: slots.CablePullResponse
	(*WireListRequest)(nil),       // 5: slots.WireListRequest
	(*WireListResponse)(nil),      // 6: slots.WireListResponse
	(*WirePullRequest)(nil),       // 7: slots.WirePullRequest
	(*WirePullResponse)(nil),      // 8: slots.WirePullResponse
	(*WirePullValueRequest)(nil),  // 9: slots.WirePullValueRequest
	(*WirePullValueResponse)(nil), // 10: slots.WirePullValueResponse
	(*pb.Page)(nil),               // 11: pb.Page
	(*pb.Cable)(nil),              // 12: pb.Cable
	(*pb.Wire)(nil),               // 13: pb.Wire
	(*pb.WireValueUpdated)(nil),   // 14: pb.WireValueUpdated
	(*pb.Id)(nil),                 // 15: pb.Id
	(*pb.Name)(nil),               // 16: pb.Name
	(*pb.WireValue)(nil),          // 17: pb.WireValue
	(*pb.WireNameValue)(nil),      // 18: pb.WireNameValue
	(*pb.MyBool)(nil),             // 19: pb.MyBool
}
var file_slots_cable_service_proto_depIdxs = []int32{
	11, // 0: slots.CableListRequest.page:type_name -> pb.Page
	11, // 1: slots.CableListResponse.page:type_name -> pb.Page
	12, // 2: slots.CableListResponse.cable:type_name -> pb.Cable
	12, // 3: slots.CablePullResponse.cable:type_name -> pb.Cable
	11, // 4: slots.WireListRequest.page:type_name -> pb.Page
	11, // 5: slots.WireListResponse.page:type_name -> pb.Page
	13, // 6: slots.WireListResponse.wire:type_name -> pb.Wire
	13, // 7: slots.WirePullResponse.wire:type_name -> pb.Wire
	14, // 8: slots.WirePullValueResponse.wire:type_name -> pb.WireValueUpdated
	12, // 9: slots.CableService.Create:input_type -> pb.Cable
	12, // 10: slots.CableService.Update:input_type -> pb.Cable
	15, // 11: slots.CableService.View:input_type -> pb.Id
	16, // 12: slots.CableService.Name:input_type -> pb.Name
	15, // 13: slots.CableService.Delete:input_type -> pb.Id
	0,  // 14: slots.CableService.List:input_type -> slots.CableListRequest
	2,  // 15: slots.CableService.Link:input_type -> slots.CableLinkRequest
	15, // 16: slots.CableService.ViewWithDeleted:input_type -> pb.Id
	3,  // 17: slots.CableService.Pull:input_type -> slots.CablePullRequest
	12, // 18: slots.CableService.Sync:input_type -> pb.Cable
	13, // 19: slots.WireService.Create:input_type -> pb.Wire
	13, // 20: slots.WireService.Update:input_type -> pb.Wire
	15, // 21: slots.WireService.View:input_type -> pb.Id
	16, // 22: slots.WireService.Name:input_type -> pb.Name
	15, // 23: slots.WireService.Delete:input_type -> pb.Id
	5,  // 24: slots.WireService.List:input_type -> slots.WireListRequest
	15, // 25: slots.WireService.GetValue:input_type -> pb.Id
	17, // 26: slots.WireService.SetValue:input_type -> pb.WireValue
	17, // 27: slots.WireService.SetValueUnchecked:input_type -> pb.WireValue
	16, // 28: slots.WireService.GetValueByName:input_type -> pb.Name
	18, // 29: slots.WireService.SetValueByName:input_type -> pb.WireNameValue
	18, // 30: slots.WireService.SetValueByNameUnchecked:input_type -> pb.WireNameValue
	15, // 31: slots.WireService.ViewWithDeleted:input_type -> pb.Id
	7,  // 32: slots.WireService.Pull:input_type -> slots.WirePullRequest
	13, // 33: slots.WireService.Sync:input_type -> pb.Wire
	15, // 34: slots.WireService.ViewValue:input_type -> pb.Id
	15, // 35: slots.WireService.DeleteValue:input_type -> pb.Id
	9,  // 36: slots.WireService.PullValue:input_type -> slots.WirePullValueRequest
	17, // 37: slots.WireService.SyncValue:input_type -> pb.WireValue
	12, // 38: slots.CableService.Create:output_type -> pb.Cable
	12, // 39: slots.CableService.Update:output_type -> pb.Cable
	12, // 40: slots.CableService.View:output_type -> pb.Cable
	12, // 41: slots.CableService.Name:output_type -> pb.Cable
	19, // 42: slots.CableService.Delete:output_type -> pb.MyBool
	1,  // 43: slots.CableService.List:output_type -> slots.CableListResponse
	19, // 44: slots.CableService.Link:output_type -> pb.MyBool
	12, // 45: slots.CableService.ViewWithDeleted:output_type -> pb.Cable
	4,  // 46: slots.CableService.Pull:output_type -> slots.CablePullResponse
	19, // 47: slots.CableService.Sync:output_type -> pb.MyBool
	13, // 48: slots.WireService.Create:output_type -> pb.Wire
	13, // 49: slots.WireService.Update:output_type -> pb.Wire
	13, // 50: slots.WireService.View:output_type -> pb.Wire
	13, // 51: slots.WireService.Name:output_type -> pb.Wire
	19, // 52: slots.WireService.Delete:output_type -> pb.MyBool
	6,  // 53: slots.WireService.List:output_type -> slots.WireListResponse
	17, // 54: slots.WireService.GetValue:output_type -> pb.WireValue
	19, // 55: slots.WireService.SetValue:output_type -> pb.MyBool
	19, // 56: slots.WireService.SetValueUnchecked:output_type -> pb.MyBool
	18, // 57: slots.WireService.GetValueByName:output_type -> pb.WireNameValue
	19, // 58: slots.WireService.SetValueByName:output_type -> pb.MyBool
	19, // 59: slots.WireService.SetValueByNameUnchecked:output_type -> pb.MyBool
	13, // 60: slots.WireService.ViewWithDeleted:output_type -> pb.Wire
	8,  // 61: slots.WireService.Pull:output_type -> slots.WirePullResponse
	19, // 62: slots.WireService.Sync:output_type -> pb.MyBool
	14, // 63: slots.WireService.ViewValue:output_type -> pb.WireValueUpdated
	19, // 64: slots.WireService.DeleteValue:output_type -> pb.MyBool
	10, // 65: slots.WireService.PullValue:output_type -> slots.WirePullValueResponse
	19, // 66: slots.WireService.SyncValue:output_type -> pb.MyBool
	38, // [38:67] is the sub-list for method output_type
	9,  // [9:38] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_slots_cable_service_proto_init() }
func file_slots_cable_service_proto_init() {
	if File_slots_cable_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_slots_cable_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CableListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slots_cable_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CableListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slots_cable_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CableLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slots_cable_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CablePullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slots_cable_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CablePullResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slots_cable_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WireListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slots_cable_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WireListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slots_cable_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WirePullRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slots_cable_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WirePullResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slots_cable_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WirePullValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_slots_cable_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WirePullValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_slots_cable_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_slots_cable_service_proto_goTypes,
		DependencyIndexes: file_slots_cable_service_proto_depIdxs,
		MessageInfos:      file_slots_cable_service_proto_msgTypes,
	}.Build()
	File_slots_cable_service_proto = out.File
	file_slots_cable_service_proto_rawDesc = nil
	file_slots_cable_service_proto_goTypes = nil
	file_slots_cable_service_proto_depIdxs = nil
}
