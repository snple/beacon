// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: cores/wire_service.proto

package cores

import (
	context "context"
	pb "github.com/snple/beacon/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WireService_Create_FullMethodName          = "/cores.WireService/Create"
	WireService_Update_FullMethodName          = "/cores.WireService/Update"
	WireService_View_FullMethodName            = "/cores.WireService/View"
	WireService_Name_FullMethodName            = "/cores.WireService/Name"
	WireService_NameFull_FullMethodName        = "/cores.WireService/NameFull"
	WireService_Delete_FullMethodName          = "/cores.WireService/Delete"
	WireService_List_FullMethodName            = "/cores.WireService/List"
	WireService_Link_FullMethodName            = "/cores.WireService/Link"
	WireService_Clone_FullMethodName           = "/cores.WireService/Clone"
	WireService_ViewWithDeleted_FullMethodName = "/cores.WireService/ViewWithDeleted"
	WireService_Pull_FullMethodName            = "/cores.WireService/Pull"
	WireService_Sync_FullMethodName            = "/cores.WireService/Sync"
)

// WireServiceClient is the client API for WireService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WireServiceClient interface {
	Create(ctx context.Context, in *pb.Wire, opts ...grpc.CallOption) (*pb.Wire, error)
	Update(ctx context.Context, in *pb.Wire, opts ...grpc.CallOption) (*pb.Wire, error)
	View(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Wire, error)
	Name(ctx context.Context, in *WireNameRequest, opts ...grpc.CallOption) (*pb.Wire, error)
	NameFull(ctx context.Context, in *pb.Name, opts ...grpc.CallOption) (*pb.Wire, error)
	Delete(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error)
	List(ctx context.Context, in *WireListRequest, opts ...grpc.CallOption) (*WireListResponse, error)
	Link(ctx context.Context, in *WireLinkRequest, opts ...grpc.CallOption) (*pb.MyBool, error)
	Clone(ctx context.Context, in *WireCloneRequest, opts ...grpc.CallOption) (*pb.MyBool, error)
	ViewWithDeleted(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Wire, error)
	Pull(ctx context.Context, in *WirePullRequest, opts ...grpc.CallOption) (*WirePullResponse, error)
	Sync(ctx context.Context, in *pb.Wire, opts ...grpc.CallOption) (*pb.MyBool, error)
}

type wireServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWireServiceClient(cc grpc.ClientConnInterface) WireServiceClient {
	return &wireServiceClient{cc}
}

func (c *wireServiceClient) Create(ctx context.Context, in *pb.Wire, opts ...grpc.CallOption) (*pb.Wire, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.Wire)
	err := c.cc.Invoke(ctx, WireService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) Update(ctx context.Context, in *pb.Wire, opts ...grpc.CallOption) (*pb.Wire, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.Wire)
	err := c.cc.Invoke(ctx, WireService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) View(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Wire, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.Wire)
	err := c.cc.Invoke(ctx, WireService_View_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) Name(ctx context.Context, in *WireNameRequest, opts ...grpc.CallOption) (*pb.Wire, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.Wire)
	err := c.cc.Invoke(ctx, WireService_Name_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) NameFull(ctx context.Context, in *pb.Name, opts ...grpc.CallOption) (*pb.Wire, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.Wire)
	err := c.cc.Invoke(ctx, WireService_NameFull_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) Delete(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, WireService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) List(ctx context.Context, in *WireListRequest, opts ...grpc.CallOption) (*WireListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WireListResponse)
	err := c.cc.Invoke(ctx, WireService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) Link(ctx context.Context, in *WireLinkRequest, opts ...grpc.CallOption) (*pb.MyBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, WireService_Link_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) Clone(ctx context.Context, in *WireCloneRequest, opts ...grpc.CallOption) (*pb.MyBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, WireService_Clone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) ViewWithDeleted(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Wire, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.Wire)
	err := c.cc.Invoke(ctx, WireService_ViewWithDeleted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) Pull(ctx context.Context, in *WirePullRequest, opts ...grpc.CallOption) (*WirePullResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WirePullResponse)
	err := c.cc.Invoke(ctx, WireService_Pull_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) Sync(ctx context.Context, in *pb.Wire, opts ...grpc.CallOption) (*pb.MyBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, WireService_Sync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WireServiceServer is the server API for WireService service.
// All implementations must embed UnimplementedWireServiceServer
// for forward compatibility.
type WireServiceServer interface {
	Create(context.Context, *pb.Wire) (*pb.Wire, error)
	Update(context.Context, *pb.Wire) (*pb.Wire, error)
	View(context.Context, *pb.Id) (*pb.Wire, error)
	Name(context.Context, *WireNameRequest) (*pb.Wire, error)
	NameFull(context.Context, *pb.Name) (*pb.Wire, error)
	Delete(context.Context, *pb.Id) (*pb.MyBool, error)
	List(context.Context, *WireListRequest) (*WireListResponse, error)
	Link(context.Context, *WireLinkRequest) (*pb.MyBool, error)
	Clone(context.Context, *WireCloneRequest) (*pb.MyBool, error)
	ViewWithDeleted(context.Context, *pb.Id) (*pb.Wire, error)
	Pull(context.Context, *WirePullRequest) (*WirePullResponse, error)
	Sync(context.Context, *pb.Wire) (*pb.MyBool, error)
	mustEmbedUnimplementedWireServiceServer()
}

// UnimplementedWireServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWireServiceServer struct{}

func (UnimplementedWireServiceServer) Create(context.Context, *pb.Wire) (*pb.Wire, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWireServiceServer) Update(context.Context, *pb.Wire) (*pb.Wire, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWireServiceServer) View(context.Context, *pb.Id) (*pb.Wire, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedWireServiceServer) Name(context.Context, *WireNameRequest) (*pb.Wire, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (UnimplementedWireServiceServer) NameFull(context.Context, *pb.Name) (*pb.Wire, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NameFull not implemented")
}
func (UnimplementedWireServiceServer) Delete(context.Context, *pb.Id) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWireServiceServer) List(context.Context, *WireListRequest) (*WireListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWireServiceServer) Link(context.Context, *WireLinkRequest) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (UnimplementedWireServiceServer) Clone(context.Context, *WireCloneRequest) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clone not implemented")
}
func (UnimplementedWireServiceServer) ViewWithDeleted(context.Context, *pb.Id) (*pb.Wire, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewWithDeleted not implemented")
}
func (UnimplementedWireServiceServer) Pull(context.Context, *WirePullRequest) (*WirePullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedWireServiceServer) Sync(context.Context, *pb.Wire) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedWireServiceServer) mustEmbedUnimplementedWireServiceServer() {}
func (UnimplementedWireServiceServer) testEmbeddedByValue()                     {}

// UnsafeWireServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WireServiceServer will
// result in compilation errors.
type UnsafeWireServiceServer interface {
	mustEmbedUnimplementedWireServiceServer()
}

func RegisterWireServiceServer(s grpc.ServiceRegistrar, srv WireServiceServer) {
	// If the following call pancis, it indicates UnimplementedWireServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WireService_ServiceDesc, srv)
}

func _WireService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Wire)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).Create(ctx, req.(*pb.Wire))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Wire)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).Update(ctx, req.(*pb.Wire))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_View_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).View(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WireNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_Name_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).Name(ctx, req.(*WireNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_NameFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).NameFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_NameFull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).NameFull(ctx, req.(*pb.Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).Delete(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WireListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).List(ctx, req.(*WireListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_Link_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WireLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).Link(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_Link_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).Link(ctx, req.(*WireLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WireCloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).Clone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_Clone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).Clone(ctx, req.(*WireCloneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_ViewWithDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).ViewWithDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_ViewWithDeleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).ViewWithDeleted(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WirePullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_Pull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).Pull(ctx, req.(*WirePullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Wire)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).Sync(ctx, req.(*pb.Wire))
	}
	return interceptor(ctx, in, info, handler)
}

// WireService_ServiceDesc is the grpc.ServiceDesc for WireService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WireService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cores.WireService",
	HandlerType: (*WireServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _WireService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _WireService_Update_Handler,
		},
		{
			MethodName: "View",
			Handler:    _WireService_View_Handler,
		},
		{
			MethodName: "Name",
			Handler:    _WireService_Name_Handler,
		},
		{
			MethodName: "NameFull",
			Handler:    _WireService_NameFull_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WireService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _WireService_List_Handler,
		},
		{
			MethodName: "Link",
			Handler:    _WireService_Link_Handler,
		},
		{
			MethodName: "Clone",
			Handler:    _WireService_Clone_Handler,
		},
		{
			MethodName: "ViewWithDeleted",
			Handler:    _WireService_ViewWithDeleted_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _WireService_Pull_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _WireService_Sync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cores/wire_service.proto",
}

const (
	PinService_Create_FullMethodName          = "/cores.PinService/Create"
	PinService_Update_FullMethodName          = "/cores.PinService/Update"
	PinService_View_FullMethodName            = "/cores.PinService/View"
	PinService_Name_FullMethodName            = "/cores.PinService/Name"
	PinService_NameFull_FullMethodName        = "/cores.PinService/NameFull"
	PinService_Delete_FullMethodName          = "/cores.PinService/Delete"
	PinService_List_FullMethodName            = "/cores.PinService/List"
	PinService_Clone_FullMethodName           = "/cores.PinService/Clone"
	PinService_ViewWithDeleted_FullMethodName = "/cores.PinService/ViewWithDeleted"
	PinService_Pull_FullMethodName            = "/cores.PinService/Pull"
	PinService_Sync_FullMethodName            = "/cores.PinService/Sync"
	PinService_GetValue_FullMethodName        = "/cores.PinService/GetValue"
	PinService_SetValue_FullMethodName        = "/cores.PinService/SetValue"
	PinService_GetValueByName_FullMethodName  = "/cores.PinService/GetValueByName"
	PinService_SetValueByName_FullMethodName  = "/cores.PinService/SetValueByName"
	PinService_ViewValue_FullMethodName       = "/cores.PinService/ViewValue"
	PinService_DeleteValue_FullMethodName     = "/cores.PinService/DeleteValue"
	PinService_PullValue_FullMethodName       = "/cores.PinService/PullValue"
	PinService_SyncValue_FullMethodName       = "/cores.PinService/SyncValue"
	PinService_GetWrite_FullMethodName        = "/cores.PinService/GetWrite"
	PinService_SetWrite_FullMethodName        = "/cores.PinService/SetWrite"
	PinService_GetWriteByName_FullMethodName  = "/cores.PinService/GetWriteByName"
	PinService_SetWriteByName_FullMethodName  = "/cores.PinService/SetWriteByName"
	PinService_ViewWrite_FullMethodName       = "/cores.PinService/ViewWrite"
	PinService_DeleteWrite_FullMethodName     = "/cores.PinService/DeleteWrite"
	PinService_PullWrite_FullMethodName       = "/cores.PinService/PullWrite"
	PinService_SyncWrite_FullMethodName       = "/cores.PinService/SyncWrite"
)

// PinServiceClient is the client API for PinService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PinServiceClient interface {
	Create(ctx context.Context, in *pb.Pin, opts ...grpc.CallOption) (*pb.Pin, error)
	Update(ctx context.Context, in *pb.Pin, opts ...grpc.CallOption) (*pb.Pin, error)
	View(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Pin, error)
	Name(ctx context.Context, in *PinNameRequest, opts ...grpc.CallOption) (*pb.Pin, error)
	NameFull(ctx context.Context, in *pb.Name, opts ...grpc.CallOption) (*pb.Pin, error)
	Delete(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error)
	List(ctx context.Context, in *PinListRequest, opts ...grpc.CallOption) (*PinListResponse, error)
	Clone(ctx context.Context, in *PinCloneRequest, opts ...grpc.CallOption) (*pb.MyBool, error)
	ViewWithDeleted(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Pin, error)
	Pull(ctx context.Context, in *PinPullRequest, opts ...grpc.CallOption) (*PinPullResponse, error)
	Sync(ctx context.Context, in *pb.Pin, opts ...grpc.CallOption) (*pb.MyBool, error)
	GetValue(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.PinValue, error)
	SetValue(ctx context.Context, in *pb.PinValue, opts ...grpc.CallOption) (*pb.MyBool, error)
	GetValueByName(ctx context.Context, in *PinGetValueByNameRequest, opts ...grpc.CallOption) (*PinNameValue, error)
	SetValueByName(ctx context.Context, in *PinNameValue, opts ...grpc.CallOption) (*pb.MyBool, error)
	ViewValue(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.PinValueUpdated, error)
	DeleteValue(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error)
	PullValue(ctx context.Context, in *PinPullValueRequest, opts ...grpc.CallOption) (*PinPullValueResponse, error)
	SyncValue(ctx context.Context, in *pb.PinValue, opts ...grpc.CallOption) (*pb.MyBool, error)
	GetWrite(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.PinValue, error)
	SetWrite(ctx context.Context, in *pb.PinValue, opts ...grpc.CallOption) (*pb.MyBool, error)
	GetWriteByName(ctx context.Context, in *PinGetValueByNameRequest, opts ...grpc.CallOption) (*PinNameValue, error)
	SetWriteByName(ctx context.Context, in *PinNameValue, opts ...grpc.CallOption) (*pb.MyBool, error)
	ViewWrite(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.PinValueUpdated, error)
	DeleteWrite(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error)
	PullWrite(ctx context.Context, in *PinPullValueRequest, opts ...grpc.CallOption) (*PinPullValueResponse, error)
	SyncWrite(ctx context.Context, in *pb.PinValue, opts ...grpc.CallOption) (*pb.MyBool, error)
}

type pinServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPinServiceClient(cc grpc.ClientConnInterface) PinServiceClient {
	return &pinServiceClient{cc}
}

func (c *pinServiceClient) Create(ctx context.Context, in *pb.Pin, opts ...grpc.CallOption) (*pb.Pin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.Pin)
	err := c.cc.Invoke(ctx, PinService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) Update(ctx context.Context, in *pb.Pin, opts ...grpc.CallOption) (*pb.Pin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.Pin)
	err := c.cc.Invoke(ctx, PinService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) View(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Pin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.Pin)
	err := c.cc.Invoke(ctx, PinService_View_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) Name(ctx context.Context, in *PinNameRequest, opts ...grpc.CallOption) (*pb.Pin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.Pin)
	err := c.cc.Invoke(ctx, PinService_Name_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) NameFull(ctx context.Context, in *pb.Name, opts ...grpc.CallOption) (*pb.Pin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.Pin)
	err := c.cc.Invoke(ctx, PinService_NameFull_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) Delete(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, PinService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) List(ctx context.Context, in *PinListRequest, opts ...grpc.CallOption) (*PinListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PinListResponse)
	err := c.cc.Invoke(ctx, PinService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) Clone(ctx context.Context, in *PinCloneRequest, opts ...grpc.CallOption) (*pb.MyBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, PinService_Clone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) ViewWithDeleted(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Pin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.Pin)
	err := c.cc.Invoke(ctx, PinService_ViewWithDeleted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) Pull(ctx context.Context, in *PinPullRequest, opts ...grpc.CallOption) (*PinPullResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PinPullResponse)
	err := c.cc.Invoke(ctx, PinService_Pull_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) Sync(ctx context.Context, in *pb.Pin, opts ...grpc.CallOption) (*pb.MyBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, PinService_Sync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) GetValue(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.PinValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.PinValue)
	err := c.cc.Invoke(ctx, PinService_GetValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) SetValue(ctx context.Context, in *pb.PinValue, opts ...grpc.CallOption) (*pb.MyBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, PinService_SetValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) GetValueByName(ctx context.Context, in *PinGetValueByNameRequest, opts ...grpc.CallOption) (*PinNameValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PinNameValue)
	err := c.cc.Invoke(ctx, PinService_GetValueByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) SetValueByName(ctx context.Context, in *PinNameValue, opts ...grpc.CallOption) (*pb.MyBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, PinService_SetValueByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) ViewValue(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.PinValueUpdated, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.PinValueUpdated)
	err := c.cc.Invoke(ctx, PinService_ViewValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) DeleteValue(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, PinService_DeleteValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) PullValue(ctx context.Context, in *PinPullValueRequest, opts ...grpc.CallOption) (*PinPullValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PinPullValueResponse)
	err := c.cc.Invoke(ctx, PinService_PullValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) SyncValue(ctx context.Context, in *pb.PinValue, opts ...grpc.CallOption) (*pb.MyBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, PinService_SyncValue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) GetWrite(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.PinValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.PinValue)
	err := c.cc.Invoke(ctx, PinService_GetWrite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) SetWrite(ctx context.Context, in *pb.PinValue, opts ...grpc.CallOption) (*pb.MyBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, PinService_SetWrite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) GetWriteByName(ctx context.Context, in *PinGetValueByNameRequest, opts ...grpc.CallOption) (*PinNameValue, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PinNameValue)
	err := c.cc.Invoke(ctx, PinService_GetWriteByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) SetWriteByName(ctx context.Context, in *PinNameValue, opts ...grpc.CallOption) (*pb.MyBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, PinService_SetWriteByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) ViewWrite(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.PinValueUpdated, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.PinValueUpdated)
	err := c.cc.Invoke(ctx, PinService_ViewWrite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) DeleteWrite(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, PinService_DeleteWrite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) PullWrite(ctx context.Context, in *PinPullValueRequest, opts ...grpc.CallOption) (*PinPullValueResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PinPullValueResponse)
	err := c.cc.Invoke(ctx, PinService_PullWrite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pinServiceClient) SyncWrite(ctx context.Context, in *pb.PinValue, opts ...grpc.CallOption) (*pb.MyBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, PinService_SyncWrite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PinServiceServer is the server API for PinService service.
// All implementations must embed UnimplementedPinServiceServer
// for forward compatibility.
type PinServiceServer interface {
	Create(context.Context, *pb.Pin) (*pb.Pin, error)
	Update(context.Context, *pb.Pin) (*pb.Pin, error)
	View(context.Context, *pb.Id) (*pb.Pin, error)
	Name(context.Context, *PinNameRequest) (*pb.Pin, error)
	NameFull(context.Context, *pb.Name) (*pb.Pin, error)
	Delete(context.Context, *pb.Id) (*pb.MyBool, error)
	List(context.Context, *PinListRequest) (*PinListResponse, error)
	Clone(context.Context, *PinCloneRequest) (*pb.MyBool, error)
	ViewWithDeleted(context.Context, *pb.Id) (*pb.Pin, error)
	Pull(context.Context, *PinPullRequest) (*PinPullResponse, error)
	Sync(context.Context, *pb.Pin) (*pb.MyBool, error)
	GetValue(context.Context, *pb.Id) (*pb.PinValue, error)
	SetValue(context.Context, *pb.PinValue) (*pb.MyBool, error)
	GetValueByName(context.Context, *PinGetValueByNameRequest) (*PinNameValue, error)
	SetValueByName(context.Context, *PinNameValue) (*pb.MyBool, error)
	ViewValue(context.Context, *pb.Id) (*pb.PinValueUpdated, error)
	DeleteValue(context.Context, *pb.Id) (*pb.MyBool, error)
	PullValue(context.Context, *PinPullValueRequest) (*PinPullValueResponse, error)
	SyncValue(context.Context, *pb.PinValue) (*pb.MyBool, error)
	GetWrite(context.Context, *pb.Id) (*pb.PinValue, error)
	SetWrite(context.Context, *pb.PinValue) (*pb.MyBool, error)
	GetWriteByName(context.Context, *PinGetValueByNameRequest) (*PinNameValue, error)
	SetWriteByName(context.Context, *PinNameValue) (*pb.MyBool, error)
	ViewWrite(context.Context, *pb.Id) (*pb.PinValueUpdated, error)
	DeleteWrite(context.Context, *pb.Id) (*pb.MyBool, error)
	PullWrite(context.Context, *PinPullValueRequest) (*PinPullValueResponse, error)
	SyncWrite(context.Context, *pb.PinValue) (*pb.MyBool, error)
	mustEmbedUnimplementedPinServiceServer()
}

// UnimplementedPinServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPinServiceServer struct{}

func (UnimplementedPinServiceServer) Create(context.Context, *pb.Pin) (*pb.Pin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPinServiceServer) Update(context.Context, *pb.Pin) (*pb.Pin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPinServiceServer) View(context.Context, *pb.Id) (*pb.Pin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedPinServiceServer) Name(context.Context, *PinNameRequest) (*pb.Pin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (UnimplementedPinServiceServer) NameFull(context.Context, *pb.Name) (*pb.Pin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NameFull not implemented")
}
func (UnimplementedPinServiceServer) Delete(context.Context, *pb.Id) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPinServiceServer) List(context.Context, *PinListRequest) (*PinListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPinServiceServer) Clone(context.Context, *PinCloneRequest) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clone not implemented")
}
func (UnimplementedPinServiceServer) ViewWithDeleted(context.Context, *pb.Id) (*pb.Pin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewWithDeleted not implemented")
}
func (UnimplementedPinServiceServer) Pull(context.Context, *PinPullRequest) (*PinPullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedPinServiceServer) Sync(context.Context, *pb.Pin) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedPinServiceServer) GetValue(context.Context, *pb.Id) (*pb.PinValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedPinServiceServer) SetValue(context.Context, *pb.PinValue) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValue not implemented")
}
func (UnimplementedPinServiceServer) GetValueByName(context.Context, *PinGetValueByNameRequest) (*PinNameValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValueByName not implemented")
}
func (UnimplementedPinServiceServer) SetValueByName(context.Context, *PinNameValue) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValueByName not implemented")
}
func (UnimplementedPinServiceServer) ViewValue(context.Context, *pb.Id) (*pb.PinValueUpdated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewValue not implemented")
}
func (UnimplementedPinServiceServer) DeleteValue(context.Context, *pb.Id) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteValue not implemented")
}
func (UnimplementedPinServiceServer) PullValue(context.Context, *PinPullValueRequest) (*PinPullValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullValue not implemented")
}
func (UnimplementedPinServiceServer) SyncValue(context.Context, *pb.PinValue) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncValue not implemented")
}
func (UnimplementedPinServiceServer) GetWrite(context.Context, *pb.Id) (*pb.PinValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWrite not implemented")
}
func (UnimplementedPinServiceServer) SetWrite(context.Context, *pb.PinValue) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWrite not implemented")
}
func (UnimplementedPinServiceServer) GetWriteByName(context.Context, *PinGetValueByNameRequest) (*PinNameValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWriteByName not implemented")
}
func (UnimplementedPinServiceServer) SetWriteByName(context.Context, *PinNameValue) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWriteByName not implemented")
}
func (UnimplementedPinServiceServer) ViewWrite(context.Context, *pb.Id) (*pb.PinValueUpdated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewWrite not implemented")
}
func (UnimplementedPinServiceServer) DeleteWrite(context.Context, *pb.Id) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWrite not implemented")
}
func (UnimplementedPinServiceServer) PullWrite(context.Context, *PinPullValueRequest) (*PinPullValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullWrite not implemented")
}
func (UnimplementedPinServiceServer) SyncWrite(context.Context, *pb.PinValue) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncWrite not implemented")
}
func (UnimplementedPinServiceServer) mustEmbedUnimplementedPinServiceServer() {}
func (UnimplementedPinServiceServer) testEmbeddedByValue()                    {}

// UnsafePinServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PinServiceServer will
// result in compilation errors.
type UnsafePinServiceServer interface {
	mustEmbedUnimplementedPinServiceServer()
}

func RegisterPinServiceServer(s grpc.ServiceRegistrar, srv PinServiceServer) {
	// If the following call pancis, it indicates UnimplementedPinServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PinService_ServiceDesc, srv)
}

func _PinService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Pin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).Create(ctx, req.(*pb.Pin))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Pin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).Update(ctx, req.(*pb.Pin))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_View_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).View(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_Name_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).Name(ctx, req.(*PinNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_NameFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).NameFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_NameFull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).NameFull(ctx, req.(*pb.Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).Delete(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).List(ctx, req.(*PinListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinCloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).Clone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_Clone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).Clone(ctx, req.(*PinCloneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_ViewWithDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).ViewWithDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_ViewWithDeleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).ViewWithDeleted(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinPullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_Pull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).Pull(ctx, req.(*PinPullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Pin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).Sync(ctx, req.(*pb.Pin))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_GetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).GetValue(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_SetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.PinValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).SetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_SetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).SetValue(ctx, req.(*pb.PinValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_GetValueByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinGetValueByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).GetValueByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_GetValueByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).GetValueByName(ctx, req.(*PinGetValueByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_SetValueByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinNameValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).SetValueByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_SetValueByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).SetValueByName(ctx, req.(*PinNameValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_ViewValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).ViewValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_ViewValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).ViewValue(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_DeleteValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).DeleteValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_DeleteValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).DeleteValue(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_PullValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinPullValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).PullValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_PullValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).PullValue(ctx, req.(*PinPullValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_SyncValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.PinValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).SyncValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_SyncValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).SyncValue(ctx, req.(*pb.PinValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_GetWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).GetWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_GetWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).GetWrite(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_SetWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.PinValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).SetWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_SetWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).SetWrite(ctx, req.(*pb.PinValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_GetWriteByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinGetValueByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).GetWriteByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_GetWriteByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).GetWriteByName(ctx, req.(*PinGetValueByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_SetWriteByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinNameValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).SetWriteByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_SetWriteByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).SetWriteByName(ctx, req.(*PinNameValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_ViewWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).ViewWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_ViewWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).ViewWrite(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_DeleteWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).DeleteWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_DeleteWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).DeleteWrite(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_PullWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinPullValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).PullWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_PullWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).PullWrite(ctx, req.(*PinPullValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PinService_SyncWrite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.PinValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PinServiceServer).SyncWrite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PinService_SyncWrite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PinServiceServer).SyncWrite(ctx, req.(*pb.PinValue))
	}
	return interceptor(ctx, in, info, handler)
}

// PinService_ServiceDesc is the grpc.ServiceDesc for PinService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PinService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cores.PinService",
	HandlerType: (*PinServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PinService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PinService_Update_Handler,
		},
		{
			MethodName: "View",
			Handler:    _PinService_View_Handler,
		},
		{
			MethodName: "Name",
			Handler:    _PinService_Name_Handler,
		},
		{
			MethodName: "NameFull",
			Handler:    _PinService_NameFull_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PinService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PinService_List_Handler,
		},
		{
			MethodName: "Clone",
			Handler:    _PinService_Clone_Handler,
		},
		{
			MethodName: "ViewWithDeleted",
			Handler:    _PinService_ViewWithDeleted_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _PinService_Pull_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _PinService_Sync_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _PinService_GetValue_Handler,
		},
		{
			MethodName: "SetValue",
			Handler:    _PinService_SetValue_Handler,
		},
		{
			MethodName: "GetValueByName",
			Handler:    _PinService_GetValueByName_Handler,
		},
		{
			MethodName: "SetValueByName",
			Handler:    _PinService_SetValueByName_Handler,
		},
		{
			MethodName: "ViewValue",
			Handler:    _PinService_ViewValue_Handler,
		},
		{
			MethodName: "DeleteValue",
			Handler:    _PinService_DeleteValue_Handler,
		},
		{
			MethodName: "PullValue",
			Handler:    _PinService_PullValue_Handler,
		},
		{
			MethodName: "SyncValue",
			Handler:    _PinService_SyncValue_Handler,
		},
		{
			MethodName: "GetWrite",
			Handler:    _PinService_GetWrite_Handler,
		},
		{
			MethodName: "SetWrite",
			Handler:    _PinService_SetWrite_Handler,
		},
		{
			MethodName: "GetWriteByName",
			Handler:    _PinService_GetWriteByName_Handler,
		},
		{
			MethodName: "SetWriteByName",
			Handler:    _PinService_SetWriteByName_Handler,
		},
		{
			MethodName: "ViewWrite",
			Handler:    _PinService_ViewWrite_Handler,
		},
		{
			MethodName: "DeleteWrite",
			Handler:    _PinService_DeleteWrite_Handler,
		},
		{
			MethodName: "PullWrite",
			Handler:    _PinService_PullWrite_Handler,
		},
		{
			MethodName: "SyncWrite",
			Handler:    _PinService_SyncWrite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cores/wire_service.proto",
}
