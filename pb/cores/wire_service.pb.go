// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v3.21.12
// source: cores/wire_service.proto

package cores

import (
	pb "github.com/snple/beacon/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// wire
type WireListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *pb.Page               `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	NodeId        string                 `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Tags          string                 `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Source        string                 `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WireListRequest) Reset() {
	*x = WireListRequest{}
	mi := &file_cores_wire_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WireListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireListRequest) ProtoMessage() {}

func (x *WireListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cores_wire_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireListRequest.ProtoReflect.Descriptor instead.
func (*WireListRequest) Descriptor() ([]byte, []int) {
	return file_cores_wire_service_proto_rawDescGZIP(), []int{0}
}

func (x *WireListRequest) GetPage() *pb.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *WireListRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *WireListRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *WireListRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type WireListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *pb.Page               `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Count         uint32                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Wire          []*pb.Wire             `protobuf:"bytes,3,rep,name=wire,proto3" json:"wire,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WireListResponse) Reset() {
	*x = WireListResponse{}
	mi := &file_cores_wire_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WireListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireListResponse) ProtoMessage() {}

func (x *WireListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cores_wire_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireListResponse.ProtoReflect.Descriptor instead.
func (*WireListResponse) Descriptor() ([]byte, []int) {
	return file_cores_wire_service_proto_rawDescGZIP(), []int{1}
}

func (x *WireListResponse) GetPage() *pb.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *WireListResponse) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *WireListResponse) GetWire() []*pb.Wire {
	if x != nil {
		return x.Wire
	}
	return nil
}

type WireNameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WireNameRequest) Reset() {
	*x = WireNameRequest{}
	mi := &file_cores_wire_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WireNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireNameRequest) ProtoMessage() {}

func (x *WireNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cores_wire_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireNameRequest.ProtoReflect.Descriptor instead.
func (*WireNameRequest) Descriptor() ([]byte, []int) {
	return file_cores_wire_service_proto_rawDescGZIP(), []int{2}
}

func (x *WireNameRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *WireNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type WireLinkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status        int32                  `protobuf:"zigzag32,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WireLinkRequest) Reset() {
	*x = WireLinkRequest{}
	mi := &file_cores_wire_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WireLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireLinkRequest) ProtoMessage() {}

func (x *WireLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cores_wire_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireLinkRequest.ProtoReflect.Descriptor instead.
func (*WireLinkRequest) Descriptor() ([]byte, []int) {
	return file_cores_wire_service_proto_rawDescGZIP(), []int{3}
}

func (x *WireLinkRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WireLinkRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type WireCloneRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeId        string                 `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WireCloneRequest) Reset() {
	*x = WireCloneRequest{}
	mi := &file_cores_wire_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WireCloneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireCloneRequest) ProtoMessage() {}

func (x *WireCloneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cores_wire_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireCloneRequest.ProtoReflect.Descriptor instead.
func (*WireCloneRequest) Descriptor() ([]byte, []int) {
	return file_cores_wire_service_proto_rawDescGZIP(), []int{4}
}

func (x *WireCloneRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WireCloneRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type WirePullRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	After         int64                  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit         uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	NodeId        string                 `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Source        string                 `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WirePullRequest) Reset() {
	*x = WirePullRequest{}
	mi := &file_cores_wire_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WirePullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirePullRequest) ProtoMessage() {}

func (x *WirePullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cores_wire_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirePullRequest.ProtoReflect.Descriptor instead.
func (*WirePullRequest) Descriptor() ([]byte, []int) {
	return file_cores_wire_service_proto_rawDescGZIP(), []int{5}
}

func (x *WirePullRequest) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *WirePullRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *WirePullRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *WirePullRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type WirePullResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	After         int64                  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit         uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Wire          []*pb.Wire             `protobuf:"bytes,3,rep,name=wire,proto3" json:"wire,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WirePullResponse) Reset() {
	*x = WirePullResponse{}
	mi := &file_cores_wire_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WirePullResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirePullResponse) ProtoMessage() {}

func (x *WirePullResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cores_wire_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirePullResponse.ProtoReflect.Descriptor instead.
func (*WirePullResponse) Descriptor() ([]byte, []int) {
	return file_cores_wire_service_proto_rawDescGZIP(), []int{6}
}

func (x *WirePullResponse) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *WirePullResponse) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *WirePullResponse) GetWire() []*pb.Wire {
	if x != nil {
		return x.Wire
	}
	return nil
}

// pin
type PinListRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *pb.Page               `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	NodeId        string                 `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	WireId        string                 `protobuf:"bytes,3,opt,name=wire_id,json=wireId,proto3" json:"wire_id,omitempty"`
	Tags          string                 `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PinListRequest) Reset() {
	*x = PinListRequest{}
	mi := &file_cores_wire_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PinListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinListRequest) ProtoMessage() {}

func (x *PinListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cores_wire_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinListRequest.ProtoReflect.Descriptor instead.
func (*PinListRequest) Descriptor() ([]byte, []int) {
	return file_cores_wire_service_proto_rawDescGZIP(), []int{7}
}

func (x *PinListRequest) GetPage() *pb.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *PinListRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PinListRequest) GetWireId() string {
	if x != nil {
		return x.WireId
	}
	return ""
}

func (x *PinListRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

type PinListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *pb.Page               `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Count         uint32                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Pin           []*pb.Pin              `protobuf:"bytes,3,rep,name=pin,proto3" json:"pin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PinListResponse) Reset() {
	*x = PinListResponse{}
	mi := &file_cores_wire_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PinListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinListResponse) ProtoMessage() {}

func (x *PinListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cores_wire_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinListResponse.ProtoReflect.Descriptor instead.
func (*PinListResponse) Descriptor() ([]byte, []int) {
	return file_cores_wire_service_proto_rawDescGZIP(), []int{8}
}

func (x *PinListResponse) GetPage() *pb.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *PinListResponse) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PinListResponse) GetPin() []*pb.Pin {
	if x != nil {
		return x.Pin
	}
	return nil
}

type PinNameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PinNameRequest) Reset() {
	*x = PinNameRequest{}
	mi := &file_cores_wire_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PinNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinNameRequest) ProtoMessage() {}

func (x *PinNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cores_wire_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinNameRequest.ProtoReflect.Descriptor instead.
func (*PinNameRequest) Descriptor() ([]byte, []int) {
	return file_cores_wire_service_proto_rawDescGZIP(), []int{9}
}

func (x *PinNameRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PinNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PinCloneRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	WireId        string                 `protobuf:"bytes,2,opt,name=wire_id,json=wireId,proto3" json:"wire_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PinCloneRequest) Reset() {
	*x = PinCloneRequest{}
	mi := &file_cores_wire_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PinCloneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinCloneRequest) ProtoMessage() {}

func (x *PinCloneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cores_wire_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinCloneRequest.ProtoReflect.Descriptor instead.
func (*PinCloneRequest) Descriptor() ([]byte, []int) {
	return file_cores_wire_service_proto_rawDescGZIP(), []int{10}
}

func (x *PinCloneRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PinCloneRequest) GetWireId() string {
	if x != nil {
		return x.WireId
	}
	return ""
}

type PinGetValueByNameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PinGetValueByNameRequest) Reset() {
	*x = PinGetValueByNameRequest{}
	mi := &file_cores_wire_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PinGetValueByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinGetValueByNameRequest) ProtoMessage() {}

func (x *PinGetValueByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cores_wire_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinGetValueByNameRequest.ProtoReflect.Descriptor instead.
func (*PinGetValueByNameRequest) Descriptor() ([]byte, []int) {
	return file_cores_wire_service_proto_rawDescGZIP(), []int{11}
}

func (x *PinGetValueByNameRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PinGetValueByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PinNameValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Id            string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Value         string                 `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Updated       int64                  `protobuf:"varint,5,opt,name=updated,proto3" json:"updated,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PinNameValue) Reset() {
	*x = PinNameValue{}
	mi := &file_cores_wire_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PinNameValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinNameValue) ProtoMessage() {}

func (x *PinNameValue) ProtoReflect() protoreflect.Message {
	mi := &file_cores_wire_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinNameValue.ProtoReflect.Descriptor instead.
func (*PinNameValue) Descriptor() ([]byte, []int) {
	return file_cores_wire_service_proto_rawDescGZIP(), []int{12}
}

func (x *PinNameValue) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PinNameValue) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PinNameValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PinNameValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *PinNameValue) GetUpdated() int64 {
	if x != nil {
		return x.Updated
	}
	return 0
}

type PinPullRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	After         int64                  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit         uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	NodeId        string                 `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	WireId        string                 `protobuf:"bytes,4,opt,name=wire_id,json=wireId,proto3" json:"wire_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PinPullRequest) Reset() {
	*x = PinPullRequest{}
	mi := &file_cores_wire_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PinPullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinPullRequest) ProtoMessage() {}

func (x *PinPullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cores_wire_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinPullRequest.ProtoReflect.Descriptor instead.
func (*PinPullRequest) Descriptor() ([]byte, []int) {
	return file_cores_wire_service_proto_rawDescGZIP(), []int{13}
}

func (x *PinPullRequest) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *PinPullRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PinPullRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PinPullRequest) GetWireId() string {
	if x != nil {
		return x.WireId
	}
	return ""
}

type PinPullResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	After         int64                  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit         uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Pin           []*pb.Pin              `protobuf:"bytes,3,rep,name=pin,proto3" json:"pin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PinPullResponse) Reset() {
	*x = PinPullResponse{}
	mi := &file_cores_wire_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PinPullResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinPullResponse) ProtoMessage() {}

func (x *PinPullResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cores_wire_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinPullResponse.ProtoReflect.Descriptor instead.
func (*PinPullResponse) Descriptor() ([]byte, []int) {
	return file_cores_wire_service_proto_rawDescGZIP(), []int{14}
}

func (x *PinPullResponse) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *PinPullResponse) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PinPullResponse) GetPin() []*pb.Pin {
	if x != nil {
		return x.Pin
	}
	return nil
}

type PinPullValueRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	After         int64                  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit         uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	NodeId        string                 `protobuf:"bytes,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	WireId        string                 `protobuf:"bytes,4,opt,name=wire_id,json=wireId,proto3" json:"wire_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PinPullValueRequest) Reset() {
	*x = PinPullValueRequest{}
	mi := &file_cores_wire_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PinPullValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinPullValueRequest) ProtoMessage() {}

func (x *PinPullValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cores_wire_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinPullValueRequest.ProtoReflect.Descriptor instead.
func (*PinPullValueRequest) Descriptor() ([]byte, []int) {
	return file_cores_wire_service_proto_rawDescGZIP(), []int{15}
}

func (x *PinPullValueRequest) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *PinPullValueRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PinPullValueRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PinPullValueRequest) GetWireId() string {
	if x != nil {
		return x.WireId
	}
	return ""
}

type PinPullValueResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	After         int64                  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit         uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Pin           []*pb.PinValueUpdated  `protobuf:"bytes,3,rep,name=pin,proto3" json:"pin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PinPullValueResponse) Reset() {
	*x = PinPullValueResponse{}
	mi := &file_cores_wire_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PinPullValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinPullValueResponse) ProtoMessage() {}

func (x *PinPullValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cores_wire_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinPullValueResponse.ProtoReflect.Descriptor instead.
func (*PinPullValueResponse) Descriptor() ([]byte, []int) {
	return file_cores_wire_service_proto_rawDescGZIP(), []int{16}
}

func (x *PinPullValueResponse) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *PinPullValueResponse) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PinPullValueResponse) GetPin() []*pb.PinValueUpdated {
	if x != nil {
		return x.Pin
	}
	return nil
}

var File_cores_wire_service_proto protoreflect.FileDescriptor

var file_cores_wire_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x1a, 0x12, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x74, 0x0a, 0x0f,
	0x57, 0x69, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x64, 0x0a, 0x10, 0x57, 0x69, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x77, 0x69,
	0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69,
	0x72, 0x65, 0x52, 0x04, 0x77, 0x69, 0x72, 0x65, 0x22, 0x3e, 0x0a, 0x0f, 0x57, 0x69, 0x72, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x39, 0x0a, 0x0f, 0x57, 0x69, 0x72, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x3b, 0x0a, 0x10, 0x57, 0x69, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x22, 0x6e, 0x0a, 0x0f, 0x57, 0x69, 0x72, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x22, 0x5c, 0x0a, 0x10, 0x57, 0x69, 0x72, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1c, 0x0a, 0x04, 0x77, 0x69, 0x72, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x52, 0x04, 0x77, 0x69, 0x72, 0x65, 0x22, 0x74,
	0x0a, 0x0e, 0x50, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x69, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x22, 0x60, 0x0a, 0x0f, 0x50, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x03, 0x70,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69,
	0x6e, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x22, 0x3d, 0x0a, 0x0e, 0x50, 0x69, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x0f, 0x50, 0x69, 0x6e, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x69, 0x72, 0x65, 0x49,
	0x64, 0x22, 0x47, 0x0a, 0x18, 0x50, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x7b, 0x0a, 0x0c, 0x50, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x6e, 0x0a, 0x0e, 0x50, 0x69, 0x6e, 0x50, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x77, 0x69, 0x72, 0x65, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x0f, 0x50, 0x69, 0x6e, 0x50, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x52, 0x03, 0x70, 0x69,
	0x6e, 0x22, 0x73, 0x0a, 0x13, 0x50, 0x69, 0x6e, 0x50, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x77, 0x69, 0x72, 0x65, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x14, 0x50, 0x69, 0x6e, 0x50, 0x75, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x03, 0x70, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x03, 0x70, 0x69,
	0x6e, 0x32, 0xf2, 0x03, 0x0a, 0x0b, 0x57, 0x69, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x1e, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x08, 0x2e, 0x70, 0x62,
	0x2e, 0x57, 0x69, 0x72, 0x65, 0x1a, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x22,
	0x00, 0x12, 0x1e, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x08, 0x2e, 0x70, 0x62,
	0x2e, 0x57, 0x69, 0x72, 0x65, 0x1a, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x22,
	0x00, 0x12, 0x1a, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x64, 0x1a, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x22, 0x00, 0x12, 0x2a, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x57, 0x69,
	0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x08, 0x2e,
	0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x22, 0x00, 0x12, 0x20, 0x0a, 0x08, 0x4e, 0x61, 0x6d,
	0x65, 0x46, 0x75, 0x6c, 0x6c, 0x12, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x1a,
	0x08, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x22, 0x00, 0x12, 0x1e, 0x0a, 0x06, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x0a, 0x2e,
	0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x57, 0x69, 0x72, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x16,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x17, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x0f, 0x56, 0x69, 0x65, 0x77, 0x57, 0x69, 0x74, 0x68,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a,
	0x08, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x04, 0x50,
	0x75, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x57, 0x69, 0x72, 0x65,
	0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x1e, 0x0a, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x08,
	0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xce, 0x09, 0x0a, 0x0a, 0x50, 0x69, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x07, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x1a, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69,
	0x6e, 0x22, 0x00, 0x12, 0x1c, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x07, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x1a, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x22,
	0x00, 0x12, 0x19, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x64, 0x1a, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x70, 0x62,
	0x2e, 0x50, 0x69, 0x6e, 0x22, 0x00, 0x12, 0x1f, 0x0a, 0x08, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x75,
	0x6c, 0x6c, 0x12, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x07, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x69, 0x6e, 0x22, 0x00, 0x12, 0x1e, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d,
	0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x15, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x50,
	0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x2d, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x2e, 0x50, 0x69, 0x6e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12,
	0x24, 0x0a, 0x0f, 0x56, 0x69, 0x65, 0x77, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x07, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x69, 0x6e, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x04, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x15, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e,
	0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x1d,
	0x0a, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x1a,
	0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x22, 0x0a,
	0x08, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x64, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x00, 0x12, 0x26, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0c, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0a, 0x2e, 0x70, 0x62,
	0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x50, 0x69,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e,
	0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x09, 0x56, 0x69, 0x65, 0x77,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x13, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x22, 0x00, 0x12, 0x23, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x0a, 0x2e, 0x70, 0x62,
	0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x09, 0x50, 0x75, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x50,
	0x69, 0x6e, 0x50, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x50, 0x75,
	0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x27, 0x0a, 0x09, 0x53, 0x79, 0x6e, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x26,
	0x0a, 0x08, 0x53, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x0c, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73,
	0x2e, 0x50, 0x69, 0x6e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x2e, 0x50, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00,
	0x12, 0x33, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x13, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x09, 0x56, 0x69, 0x65, 0x77, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22,
	0x00, 0x12, 0x23, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79,
	0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x09, 0x50, 0x75, 0x6c, 0x6c, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x50,
	0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x50, 0x75, 0x6c, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x27,
	0x0a, 0x09, 0x53, 0x79, 0x6e, 0x63, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x0c, 0x2e, 0x70, 0x62,
	0x2e, 0x50, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d,
	0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x70, 0x6c, 0x65, 0x2f, 0x62, 0x65, 0x61, 0x63,
	0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x3b, 0x63, 0x6f, 0x72, 0x65,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cores_wire_service_proto_rawDescOnce sync.Once
	file_cores_wire_service_proto_rawDescData = file_cores_wire_service_proto_rawDesc
)

func file_cores_wire_service_proto_rawDescGZIP() []byte {
	file_cores_wire_service_proto_rawDescOnce.Do(func() {
		file_cores_wire_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_cores_wire_service_proto_rawDescData)
	})
	return file_cores_wire_service_proto_rawDescData
}

var file_cores_wire_service_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_cores_wire_service_proto_goTypes = []any{
	(*WireListRequest)(nil),          // 0: cores.WireListRequest
	(*WireListResponse)(nil),         // 1: cores.WireListResponse
	(*WireNameRequest)(nil),          // 2: cores.WireNameRequest
	(*WireLinkRequest)(nil),          // 3: cores.WireLinkRequest
	(*WireCloneRequest)(nil),         // 4: cores.WireCloneRequest
	(*WirePullRequest)(nil),          // 5: cores.WirePullRequest
	(*WirePullResponse)(nil),         // 6: cores.WirePullResponse
	(*PinListRequest)(nil),           // 7: cores.PinListRequest
	(*PinListResponse)(nil),          // 8: cores.PinListResponse
	(*PinNameRequest)(nil),           // 9: cores.PinNameRequest
	(*PinCloneRequest)(nil),          // 10: cores.PinCloneRequest
	(*PinGetValueByNameRequest)(nil), // 11: cores.PinGetValueByNameRequest
	(*PinNameValue)(nil),             // 12: cores.PinNameValue
	(*PinPullRequest)(nil),           // 13: cores.PinPullRequest
	(*PinPullResponse)(nil),          // 14: cores.PinPullResponse
	(*PinPullValueRequest)(nil),      // 15: cores.PinPullValueRequest
	(*PinPullValueResponse)(nil),     // 16: cores.PinPullValueResponse
	(*pb.Page)(nil),                  // 17: pb.Page
	(*pb.Wire)(nil),                  // 18: pb.Wire
	(*pb.Pin)(nil),                   // 19: pb.Pin
	(*pb.PinValueUpdated)(nil),       // 20: pb.PinValueUpdated
	(*pb.Id)(nil),                    // 21: pb.Id
	(*pb.Name)(nil),                  // 22: pb.Name
	(*pb.PinValue)(nil),              // 23: pb.PinValue
	(*pb.MyBool)(nil),                // 24: pb.MyBool
}
var file_cores_wire_service_proto_depIdxs = []int32{
	17, // 0: cores.WireListRequest.page:type_name -> pb.Page
	17, // 1: cores.WireListResponse.page:type_name -> pb.Page
	18, // 2: cores.WireListResponse.wire:type_name -> pb.Wire
	18, // 3: cores.WirePullResponse.wire:type_name -> pb.Wire
	17, // 4: cores.PinListRequest.page:type_name -> pb.Page
	17, // 5: cores.PinListResponse.page:type_name -> pb.Page
	19, // 6: cores.PinListResponse.pin:type_name -> pb.Pin
	19, // 7: cores.PinPullResponse.pin:type_name -> pb.Pin
	20, // 8: cores.PinPullValueResponse.pin:type_name -> pb.PinValueUpdated
	18, // 9: cores.WireService.Create:input_type -> pb.Wire
	18, // 10: cores.WireService.Update:input_type -> pb.Wire
	21, // 11: cores.WireService.View:input_type -> pb.Id
	2,  // 12: cores.WireService.Name:input_type -> cores.WireNameRequest
	22, // 13: cores.WireService.NameFull:input_type -> pb.Name
	21, // 14: cores.WireService.Delete:input_type -> pb.Id
	0,  // 15: cores.WireService.List:input_type -> cores.WireListRequest
	3,  // 16: cores.WireService.Link:input_type -> cores.WireLinkRequest
	4,  // 17: cores.WireService.Clone:input_type -> cores.WireCloneRequest
	21, // 18: cores.WireService.ViewWithDeleted:input_type -> pb.Id
	5,  // 19: cores.WireService.Pull:input_type -> cores.WirePullRequest
	18, // 20: cores.WireService.Sync:input_type -> pb.Wire
	19, // 21: cores.PinService.Create:input_type -> pb.Pin
	19, // 22: cores.PinService.Update:input_type -> pb.Pin
	21, // 23: cores.PinService.View:input_type -> pb.Id
	9,  // 24: cores.PinService.Name:input_type -> cores.PinNameRequest
	22, // 25: cores.PinService.NameFull:input_type -> pb.Name
	21, // 26: cores.PinService.Delete:input_type -> pb.Id
	7,  // 27: cores.PinService.List:input_type -> cores.PinListRequest
	10, // 28: cores.PinService.Clone:input_type -> cores.PinCloneRequest
	21, // 29: cores.PinService.ViewWithDeleted:input_type -> pb.Id
	13, // 30: cores.PinService.Pull:input_type -> cores.PinPullRequest
	19, // 31: cores.PinService.Sync:input_type -> pb.Pin
	21, // 32: cores.PinService.GetValue:input_type -> pb.Id
	23, // 33: cores.PinService.SetValue:input_type -> pb.PinValue
	11, // 34: cores.PinService.GetValueByName:input_type -> cores.PinGetValueByNameRequest
	12, // 35: cores.PinService.SetValueByName:input_type -> cores.PinNameValue
	21, // 36: cores.PinService.ViewValue:input_type -> pb.Id
	21, // 37: cores.PinService.DeleteValue:input_type -> pb.Id
	15, // 38: cores.PinService.PullValue:input_type -> cores.PinPullValueRequest
	23, // 39: cores.PinService.SyncValue:input_type -> pb.PinValue
	21, // 40: cores.PinService.GetWrite:input_type -> pb.Id
	23, // 41: cores.PinService.SetWrite:input_type -> pb.PinValue
	11, // 42: cores.PinService.GetWriteByName:input_type -> cores.PinGetValueByNameRequest
	12, // 43: cores.PinService.SetWriteByName:input_type -> cores.PinNameValue
	21, // 44: cores.PinService.ViewWrite:input_type -> pb.Id
	21, // 45: cores.PinService.DeleteWrite:input_type -> pb.Id
	15, // 46: cores.PinService.PullWrite:input_type -> cores.PinPullValueRequest
	23, // 47: cores.PinService.SyncWrite:input_type -> pb.PinValue
	18, // 48: cores.WireService.Create:output_type -> pb.Wire
	18, // 49: cores.WireService.Update:output_type -> pb.Wire
	18, // 50: cores.WireService.View:output_type -> pb.Wire
	18, // 51: cores.WireService.Name:output_type -> pb.Wire
	18, // 52: cores.WireService.NameFull:output_type -> pb.Wire
	24, // 53: cores.WireService.Delete:output_type -> pb.MyBool
	1,  // 54: cores.WireService.List:output_type -> cores.WireListResponse
	24, // 55: cores.WireService.Link:output_type -> pb.MyBool
	24, // 56: cores.WireService.Clone:output_type -> pb.MyBool
	18, // 57: cores.WireService.ViewWithDeleted:output_type -> pb.Wire
	6,  // 58: cores.WireService.Pull:output_type -> cores.WirePullResponse
	24, // 59: cores.WireService.Sync:output_type -> pb.MyBool
	19, // 60: cores.PinService.Create:output_type -> pb.Pin
	19, // 61: cores.PinService.Update:output_type -> pb.Pin
	19, // 62: cores.PinService.View:output_type -> pb.Pin
	19, // 63: cores.PinService.Name:output_type -> pb.Pin
	19, // 64: cores.PinService.NameFull:output_type -> pb.Pin
	24, // 65: cores.PinService.Delete:output_type -> pb.MyBool
	8,  // 66: cores.PinService.List:output_type -> cores.PinListResponse
	24, // 67: cores.PinService.Clone:output_type -> pb.MyBool
	19, // 68: cores.PinService.ViewWithDeleted:output_type -> pb.Pin
	14, // 69: cores.PinService.Pull:output_type -> cores.PinPullResponse
	24, // 70: cores.PinService.Sync:output_type -> pb.MyBool
	23, // 71: cores.PinService.GetValue:output_type -> pb.PinValue
	24, // 72: cores.PinService.SetValue:output_type -> pb.MyBool
	12, // 73: cores.PinService.GetValueByName:output_type -> cores.PinNameValue
	24, // 74: cores.PinService.SetValueByName:output_type -> pb.MyBool
	20, // 75: cores.PinService.ViewValue:output_type -> pb.PinValueUpdated
	24, // 76: cores.PinService.DeleteValue:output_type -> pb.MyBool
	16, // 77: cores.PinService.PullValue:output_type -> cores.PinPullValueResponse
	24, // 78: cores.PinService.SyncValue:output_type -> pb.MyBool
	23, // 79: cores.PinService.GetWrite:output_type -> pb.PinValue
	24, // 80: cores.PinService.SetWrite:output_type -> pb.MyBool
	12, // 81: cores.PinService.GetWriteByName:output_type -> cores.PinNameValue
	24, // 82: cores.PinService.SetWriteByName:output_type -> pb.MyBool
	20, // 83: cores.PinService.ViewWrite:output_type -> pb.PinValueUpdated
	24, // 84: cores.PinService.DeleteWrite:output_type -> pb.MyBool
	16, // 85: cores.PinService.PullWrite:output_type -> cores.PinPullValueResponse
	24, // 86: cores.PinService.SyncWrite:output_type -> pb.MyBool
	48, // [48:87] is the sub-list for method output_type
	9,  // [9:48] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_cores_wire_service_proto_init() }
func file_cores_wire_service_proto_init() {
	if File_cores_wire_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cores_wire_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_cores_wire_service_proto_goTypes,
		DependencyIndexes: file_cores_wire_service_proto_depIdxs,
		MessageInfos:      file_cores_wire_service_proto_msgTypes,
	}.Build()
	File_cores_wire_service_proto = out.File
	file_cores_wire_service_proto_rawDesc = nil
	file_cores_wire_service_proto_goTypes = nil
	file_cores_wire_service_proto_depIdxs = nil
}
