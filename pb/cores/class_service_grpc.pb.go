// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: cores/class_service.proto

package cores

import (
	context "context"
	pb "github.com/snple/kokomi/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClassServiceClient is the client API for ClassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClassServiceClient interface {
	Create(ctx context.Context, in *pb.Class, opts ...grpc.CallOption) (*pb.Class, error)
	Update(ctx context.Context, in *pb.Class, opts ...grpc.CallOption) (*pb.Class, error)
	View(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Class, error)
	ViewByName(ctx context.Context, in *ViewClassByNameRequest, opts ...grpc.CallOption) (*pb.Class, error)
	ViewByNameFull(ctx context.Context, in *pb.Name, opts ...grpc.CallOption) (*pb.Class, error)
	Delete(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error)
	List(ctx context.Context, in *ListClassRequest, opts ...grpc.CallOption) (*ListClassResponse, error)
	Clone(ctx context.Context, in *CloneClassRequest, opts ...grpc.CallOption) (*pb.MyBool, error)
	ViewWithDeleted(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Class, error)
	Pull(ctx context.Context, in *PullClassRequest, opts ...grpc.CallOption) (*PullClassResponse, error)
}

type classServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClassServiceClient(cc grpc.ClientConnInterface) ClassServiceClient {
	return &classServiceClient{cc}
}

func (c *classServiceClient) Create(ctx context.Context, in *pb.Class, opts ...grpc.CallOption) (*pb.Class, error) {
	out := new(pb.Class)
	err := c.cc.Invoke(ctx, "/cores.ClassService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) Update(ctx context.Context, in *pb.Class, opts ...grpc.CallOption) (*pb.Class, error) {
	out := new(pb.Class)
	err := c.cc.Invoke(ctx, "/cores.ClassService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) View(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Class, error) {
	out := new(pb.Class)
	err := c.cc.Invoke(ctx, "/cores.ClassService/View", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) ViewByName(ctx context.Context, in *ViewClassByNameRequest, opts ...grpc.CallOption) (*pb.Class, error) {
	out := new(pb.Class)
	err := c.cc.Invoke(ctx, "/cores.ClassService/ViewByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) ViewByNameFull(ctx context.Context, in *pb.Name, opts ...grpc.CallOption) (*pb.Class, error) {
	out := new(pb.Class)
	err := c.cc.Invoke(ctx, "/cores.ClassService/ViewByNameFull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) Delete(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, "/cores.ClassService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) List(ctx context.Context, in *ListClassRequest, opts ...grpc.CallOption) (*ListClassResponse, error) {
	out := new(ListClassResponse)
	err := c.cc.Invoke(ctx, "/cores.ClassService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) Clone(ctx context.Context, in *CloneClassRequest, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, "/cores.ClassService/Clone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) ViewWithDeleted(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Class, error) {
	out := new(pb.Class)
	err := c.cc.Invoke(ctx, "/cores.ClassService/ViewWithDeleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *classServiceClient) Pull(ctx context.Context, in *PullClassRequest, opts ...grpc.CallOption) (*PullClassResponse, error) {
	out := new(PullClassResponse)
	err := c.cc.Invoke(ctx, "/cores.ClassService/Pull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClassServiceServer is the server API for ClassService service.
// All implementations must embed UnimplementedClassServiceServer
// for forward compatibility
type ClassServiceServer interface {
	Create(context.Context, *pb.Class) (*pb.Class, error)
	Update(context.Context, *pb.Class) (*pb.Class, error)
	View(context.Context, *pb.Id) (*pb.Class, error)
	ViewByName(context.Context, *ViewClassByNameRequest) (*pb.Class, error)
	ViewByNameFull(context.Context, *pb.Name) (*pb.Class, error)
	Delete(context.Context, *pb.Id) (*pb.MyBool, error)
	List(context.Context, *ListClassRequest) (*ListClassResponse, error)
	Clone(context.Context, *CloneClassRequest) (*pb.MyBool, error)
	ViewWithDeleted(context.Context, *pb.Id) (*pb.Class, error)
	Pull(context.Context, *PullClassRequest) (*PullClassResponse, error)
	mustEmbedUnimplementedClassServiceServer()
}

// UnimplementedClassServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClassServiceServer struct {
}

func (UnimplementedClassServiceServer) Create(context.Context, *pb.Class) (*pb.Class, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedClassServiceServer) Update(context.Context, *pb.Class) (*pb.Class, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedClassServiceServer) View(context.Context, *pb.Id) (*pb.Class, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedClassServiceServer) ViewByName(context.Context, *ViewClassByNameRequest) (*pb.Class, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewByName not implemented")
}
func (UnimplementedClassServiceServer) ViewByNameFull(context.Context, *pb.Name) (*pb.Class, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewByNameFull not implemented")
}
func (UnimplementedClassServiceServer) Delete(context.Context, *pb.Id) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedClassServiceServer) List(context.Context, *ListClassRequest) (*ListClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedClassServiceServer) Clone(context.Context, *CloneClassRequest) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clone not implemented")
}
func (UnimplementedClassServiceServer) ViewWithDeleted(context.Context, *pb.Id) (*pb.Class, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewWithDeleted not implemented")
}
func (UnimplementedClassServiceServer) Pull(context.Context, *PullClassRequest) (*PullClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedClassServiceServer) mustEmbedUnimplementedClassServiceServer() {}

// UnsafeClassServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClassServiceServer will
// result in compilation errors.
type UnsafeClassServiceServer interface {
	mustEmbedUnimplementedClassServiceServer()
}

func RegisterClassServiceServer(s grpc.ServiceRegistrar, srv ClassServiceServer) {
	s.RegisterService(&ClassService_ServiceDesc, srv)
}

func _ClassService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Class)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.ClassService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).Create(ctx, req.(*pb.Class))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Class)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.ClassService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).Update(ctx, req.(*pb.Class))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.ClassService/View",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).View(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_ViewByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewClassByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).ViewByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.ClassService/ViewByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).ViewByName(ctx, req.(*ViewClassByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_ViewByNameFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).ViewByNameFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.ClassService/ViewByNameFull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).ViewByNameFull(ctx, req.(*pb.Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.ClassService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).Delete(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.ClassService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).List(ctx, req.(*ListClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).Clone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.ClassService/Clone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).Clone(ctx, req.(*CloneClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_ViewWithDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).ViewWithDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.ClassService/ViewWithDeleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).ViewWithDeleted(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClassService_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClassServiceServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.ClassService/Pull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClassServiceServer).Pull(ctx, req.(*PullClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClassService_ServiceDesc is the grpc.ServiceDesc for ClassService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClassService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cores.ClassService",
	HandlerType: (*ClassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ClassService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ClassService_Update_Handler,
		},
		{
			MethodName: "View",
			Handler:    _ClassService_View_Handler,
		},
		{
			MethodName: "ViewByName",
			Handler:    _ClassService_ViewByName_Handler,
		},
		{
			MethodName: "ViewByNameFull",
			Handler:    _ClassService_ViewByNameFull_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ClassService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ClassService_List_Handler,
		},
		{
			MethodName: "Clone",
			Handler:    _ClassService_Clone_Handler,
		},
		{
			MethodName: "ViewWithDeleted",
			Handler:    _ClassService_ViewWithDeleted_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _ClassService_Pull_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cores/class_service.proto",
}

// AttrServiceClient is the client API for AttrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttrServiceClient interface {
	Create(ctx context.Context, in *pb.Attr, opts ...grpc.CallOption) (*pb.Attr, error)
	Update(ctx context.Context, in *pb.Attr, opts ...grpc.CallOption) (*pb.Attr, error)
	View(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Attr, error)
	ViewByName(ctx context.Context, in *ViewAttrByNameRequest, opts ...grpc.CallOption) (*pb.Attr, error)
	ViewByNameFull(ctx context.Context, in *pb.Name, opts ...grpc.CallOption) (*pb.Attr, error)
	Delete(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error)
	List(ctx context.Context, in *ListAttrRequest, opts ...grpc.CallOption) (*ListAttrResponse, error)
	Clone(ctx context.Context, in *CloneAttrRequest, opts ...grpc.CallOption) (*pb.MyBool, error)
	GetValue(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.AttrValue, error)
	SetValue(ctx context.Context, in *pb.AttrValue, opts ...grpc.CallOption) (*pb.MyBool, error)
	SetValueUnchecked(ctx context.Context, in *pb.AttrValue, opts ...grpc.CallOption) (*pb.MyBool, error)
	GetValueByName(ctx context.Context, in *GetAttrValueByNameRequest, opts ...grpc.CallOption) (*AttrNameValue, error)
	SetValueByName(ctx context.Context, in *AttrNameValue, opts ...grpc.CallOption) (*pb.MyBool, error)
	SetValueByNameUnchecked(ctx context.Context, in *AttrNameValue, opts ...grpc.CallOption) (*pb.MyBool, error)
	ViewWithDeleted(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Attr, error)
	Pull(ctx context.Context, in *PullAttrRequest, opts ...grpc.CallOption) (*PullAttrResponse, error)
}

type attrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAttrServiceClient(cc grpc.ClientConnInterface) AttrServiceClient {
	return &attrServiceClient{cc}
}

func (c *attrServiceClient) Create(ctx context.Context, in *pb.Attr, opts ...grpc.CallOption) (*pb.Attr, error) {
	out := new(pb.Attr)
	err := c.cc.Invoke(ctx, "/cores.AttrService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrServiceClient) Update(ctx context.Context, in *pb.Attr, opts ...grpc.CallOption) (*pb.Attr, error) {
	out := new(pb.Attr)
	err := c.cc.Invoke(ctx, "/cores.AttrService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrServiceClient) View(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Attr, error) {
	out := new(pb.Attr)
	err := c.cc.Invoke(ctx, "/cores.AttrService/View", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrServiceClient) ViewByName(ctx context.Context, in *ViewAttrByNameRequest, opts ...grpc.CallOption) (*pb.Attr, error) {
	out := new(pb.Attr)
	err := c.cc.Invoke(ctx, "/cores.AttrService/ViewByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrServiceClient) ViewByNameFull(ctx context.Context, in *pb.Name, opts ...grpc.CallOption) (*pb.Attr, error) {
	out := new(pb.Attr)
	err := c.cc.Invoke(ctx, "/cores.AttrService/ViewByNameFull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrServiceClient) Delete(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, "/cores.AttrService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrServiceClient) List(ctx context.Context, in *ListAttrRequest, opts ...grpc.CallOption) (*ListAttrResponse, error) {
	out := new(ListAttrResponse)
	err := c.cc.Invoke(ctx, "/cores.AttrService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrServiceClient) Clone(ctx context.Context, in *CloneAttrRequest, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, "/cores.AttrService/Clone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrServiceClient) GetValue(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.AttrValue, error) {
	out := new(pb.AttrValue)
	err := c.cc.Invoke(ctx, "/cores.AttrService/GetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrServiceClient) SetValue(ctx context.Context, in *pb.AttrValue, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, "/cores.AttrService/SetValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrServiceClient) SetValueUnchecked(ctx context.Context, in *pb.AttrValue, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, "/cores.AttrService/SetValueUnchecked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrServiceClient) GetValueByName(ctx context.Context, in *GetAttrValueByNameRequest, opts ...grpc.CallOption) (*AttrNameValue, error) {
	out := new(AttrNameValue)
	err := c.cc.Invoke(ctx, "/cores.AttrService/GetValueByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrServiceClient) SetValueByName(ctx context.Context, in *AttrNameValue, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, "/cores.AttrService/SetValueByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrServiceClient) SetValueByNameUnchecked(ctx context.Context, in *AttrNameValue, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, "/cores.AttrService/SetValueByNameUnchecked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrServiceClient) ViewWithDeleted(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Attr, error) {
	out := new(pb.Attr)
	err := c.cc.Invoke(ctx, "/cores.AttrService/ViewWithDeleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attrServiceClient) Pull(ctx context.Context, in *PullAttrRequest, opts ...grpc.CallOption) (*PullAttrResponse, error) {
	out := new(PullAttrResponse)
	err := c.cc.Invoke(ctx, "/cores.AttrService/Pull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AttrServiceServer is the server API for AttrService service.
// All implementations must embed UnimplementedAttrServiceServer
// for forward compatibility
type AttrServiceServer interface {
	Create(context.Context, *pb.Attr) (*pb.Attr, error)
	Update(context.Context, *pb.Attr) (*pb.Attr, error)
	View(context.Context, *pb.Id) (*pb.Attr, error)
	ViewByName(context.Context, *ViewAttrByNameRequest) (*pb.Attr, error)
	ViewByNameFull(context.Context, *pb.Name) (*pb.Attr, error)
	Delete(context.Context, *pb.Id) (*pb.MyBool, error)
	List(context.Context, *ListAttrRequest) (*ListAttrResponse, error)
	Clone(context.Context, *CloneAttrRequest) (*pb.MyBool, error)
	GetValue(context.Context, *pb.Id) (*pb.AttrValue, error)
	SetValue(context.Context, *pb.AttrValue) (*pb.MyBool, error)
	SetValueUnchecked(context.Context, *pb.AttrValue) (*pb.MyBool, error)
	GetValueByName(context.Context, *GetAttrValueByNameRequest) (*AttrNameValue, error)
	SetValueByName(context.Context, *AttrNameValue) (*pb.MyBool, error)
	SetValueByNameUnchecked(context.Context, *AttrNameValue) (*pb.MyBool, error)
	ViewWithDeleted(context.Context, *pb.Id) (*pb.Attr, error)
	Pull(context.Context, *PullAttrRequest) (*PullAttrResponse, error)
	mustEmbedUnimplementedAttrServiceServer()
}

// UnimplementedAttrServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAttrServiceServer struct {
}

func (UnimplementedAttrServiceServer) Create(context.Context, *pb.Attr) (*pb.Attr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAttrServiceServer) Update(context.Context, *pb.Attr) (*pb.Attr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAttrServiceServer) View(context.Context, *pb.Id) (*pb.Attr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedAttrServiceServer) ViewByName(context.Context, *ViewAttrByNameRequest) (*pb.Attr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewByName not implemented")
}
func (UnimplementedAttrServiceServer) ViewByNameFull(context.Context, *pb.Name) (*pb.Attr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewByNameFull not implemented")
}
func (UnimplementedAttrServiceServer) Delete(context.Context, *pb.Id) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAttrServiceServer) List(context.Context, *ListAttrRequest) (*ListAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAttrServiceServer) Clone(context.Context, *CloneAttrRequest) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clone not implemented")
}
func (UnimplementedAttrServiceServer) GetValue(context.Context, *pb.Id) (*pb.AttrValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedAttrServiceServer) SetValue(context.Context, *pb.AttrValue) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValue not implemented")
}
func (UnimplementedAttrServiceServer) SetValueUnchecked(context.Context, *pb.AttrValue) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValueUnchecked not implemented")
}
func (UnimplementedAttrServiceServer) GetValueByName(context.Context, *GetAttrValueByNameRequest) (*AttrNameValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValueByName not implemented")
}
func (UnimplementedAttrServiceServer) SetValueByName(context.Context, *AttrNameValue) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValueByName not implemented")
}
func (UnimplementedAttrServiceServer) SetValueByNameUnchecked(context.Context, *AttrNameValue) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValueByNameUnchecked not implemented")
}
func (UnimplementedAttrServiceServer) ViewWithDeleted(context.Context, *pb.Id) (*pb.Attr, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewWithDeleted not implemented")
}
func (UnimplementedAttrServiceServer) Pull(context.Context, *PullAttrRequest) (*PullAttrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedAttrServiceServer) mustEmbedUnimplementedAttrServiceServer() {}

// UnsafeAttrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttrServiceServer will
// result in compilation errors.
type UnsafeAttrServiceServer interface {
	mustEmbedUnimplementedAttrServiceServer()
}

func RegisterAttrServiceServer(s grpc.ServiceRegistrar, srv AttrServiceServer) {
	s.RegisterService(&AttrService_ServiceDesc, srv)
}

func _AttrService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Attr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.AttrService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrServiceServer).Create(ctx, req.(*pb.Attr))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttrService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Attr)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.AttrService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrServiceServer).Update(ctx, req.(*pb.Attr))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttrService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.AttrService/View",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrServiceServer).View(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttrService_ViewByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewAttrByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrServiceServer).ViewByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.AttrService/ViewByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrServiceServer).ViewByName(ctx, req.(*ViewAttrByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttrService_ViewByNameFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrServiceServer).ViewByNameFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.AttrService/ViewByNameFull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrServiceServer).ViewByNameFull(ctx, req.(*pb.Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttrService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.AttrService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrServiceServer).Delete(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttrService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.AttrService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrServiceServer).List(ctx, req.(*ListAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttrService_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrServiceServer).Clone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.AttrService/Clone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrServiceServer).Clone(ctx, req.(*CloneAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttrService_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrServiceServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.AttrService/GetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrServiceServer).GetValue(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttrService_SetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.AttrValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrServiceServer).SetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.AttrService/SetValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrServiceServer).SetValue(ctx, req.(*pb.AttrValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttrService_SetValueUnchecked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.AttrValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrServiceServer).SetValueUnchecked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.AttrService/SetValueUnchecked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrServiceServer).SetValueUnchecked(ctx, req.(*pb.AttrValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttrService_GetValueByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttrValueByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrServiceServer).GetValueByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.AttrService/GetValueByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrServiceServer).GetValueByName(ctx, req.(*GetAttrValueByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttrService_SetValueByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttrNameValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrServiceServer).SetValueByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.AttrService/SetValueByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrServiceServer).SetValueByName(ctx, req.(*AttrNameValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttrService_SetValueByNameUnchecked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttrNameValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrServiceServer).SetValueByNameUnchecked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.AttrService/SetValueByNameUnchecked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrServiceServer).SetValueByNameUnchecked(ctx, req.(*AttrNameValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttrService_ViewWithDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrServiceServer).ViewWithDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.AttrService/ViewWithDeleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrServiceServer).ViewWithDeleted(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AttrService_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullAttrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttrServiceServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.AttrService/Pull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttrServiceServer).Pull(ctx, req.(*PullAttrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AttrService_ServiceDesc is the grpc.ServiceDesc for AttrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AttrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cores.AttrService",
	HandlerType: (*AttrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AttrService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AttrService_Update_Handler,
		},
		{
			MethodName: "View",
			Handler:    _AttrService_View_Handler,
		},
		{
			MethodName: "ViewByName",
			Handler:    _AttrService_ViewByName_Handler,
		},
		{
			MethodName: "ViewByNameFull",
			Handler:    _AttrService_ViewByNameFull_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AttrService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AttrService_List_Handler,
		},
		{
			MethodName: "Clone",
			Handler:    _AttrService_Clone_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _AttrService_GetValue_Handler,
		},
		{
			MethodName: "SetValue",
			Handler:    _AttrService_SetValue_Handler,
		},
		{
			MethodName: "SetValueUnchecked",
			Handler:    _AttrService_SetValueUnchecked_Handler,
		},
		{
			MethodName: "GetValueByName",
			Handler:    _AttrService_GetValueByName_Handler,
		},
		{
			MethodName: "SetValueByName",
			Handler:    _AttrService_SetValueByName_Handler,
		},
		{
			MethodName: "SetValueByNameUnchecked",
			Handler:    _AttrService_SetValueByNameUnchecked_Handler,
		},
		{
			MethodName: "ViewWithDeleted",
			Handler:    _AttrService_ViewWithDeleted_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _AttrService_Pull_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cores/class_service.proto",
}
