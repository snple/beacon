// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: cores/cable_service.proto

package cores

import (
	context "context"
	pb "github.com/snple/kokomi/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CableService_Create_FullMethodName          = "/cores.CableService/Create"
	CableService_Update_FullMethodName          = "/cores.CableService/Update"
	CableService_View_FullMethodName            = "/cores.CableService/View"
	CableService_ViewByName_FullMethodName      = "/cores.CableService/ViewByName"
	CableService_ViewByNameFull_FullMethodName  = "/cores.CableService/ViewByNameFull"
	CableService_Delete_FullMethodName          = "/cores.CableService/Delete"
	CableService_List_FullMethodName            = "/cores.CableService/List"
	CableService_Link_FullMethodName            = "/cores.CableService/Link"
	CableService_Clone_FullMethodName           = "/cores.CableService/Clone"
	CableService_ViewWithDeleted_FullMethodName = "/cores.CableService/ViewWithDeleted"
	CableService_Pull_FullMethodName            = "/cores.CableService/Pull"
)

// CableServiceClient is the client API for CableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CableServiceClient interface {
	Create(ctx context.Context, in *pb.Cable, opts ...grpc.CallOption) (*pb.Cable, error)
	Update(ctx context.Context, in *pb.Cable, opts ...grpc.CallOption) (*pb.Cable, error)
	View(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Cable, error)
	ViewByName(ctx context.Context, in *ViewCableByNameRequest, opts ...grpc.CallOption) (*pb.Cable, error)
	ViewByNameFull(ctx context.Context, in *pb.Name, opts ...grpc.CallOption) (*pb.Cable, error)
	Delete(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error)
	List(ctx context.Context, in *ListCableRequest, opts ...grpc.CallOption) (*ListCableResponse, error)
	Link(ctx context.Context, in *LinkCableRequest, opts ...grpc.CallOption) (*pb.MyBool, error)
	Clone(ctx context.Context, in *CloneCableRequest, opts ...grpc.CallOption) (*pb.MyBool, error)
	ViewWithDeleted(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Cable, error)
	Pull(ctx context.Context, in *PullCableRequest, opts ...grpc.CallOption) (*PullCableResponse, error)
}

type cableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCableServiceClient(cc grpc.ClientConnInterface) CableServiceClient {
	return &cableServiceClient{cc}
}

func (c *cableServiceClient) Create(ctx context.Context, in *pb.Cable, opts ...grpc.CallOption) (*pb.Cable, error) {
	out := new(pb.Cable)
	err := c.cc.Invoke(ctx, CableService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cableServiceClient) Update(ctx context.Context, in *pb.Cable, opts ...grpc.CallOption) (*pb.Cable, error) {
	out := new(pb.Cable)
	err := c.cc.Invoke(ctx, CableService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cableServiceClient) View(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Cable, error) {
	out := new(pb.Cable)
	err := c.cc.Invoke(ctx, CableService_View_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cableServiceClient) ViewByName(ctx context.Context, in *ViewCableByNameRequest, opts ...grpc.CallOption) (*pb.Cable, error) {
	out := new(pb.Cable)
	err := c.cc.Invoke(ctx, CableService_ViewByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cableServiceClient) ViewByNameFull(ctx context.Context, in *pb.Name, opts ...grpc.CallOption) (*pb.Cable, error) {
	out := new(pb.Cable)
	err := c.cc.Invoke(ctx, CableService_ViewByNameFull_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cableServiceClient) Delete(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, CableService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cableServiceClient) List(ctx context.Context, in *ListCableRequest, opts ...grpc.CallOption) (*ListCableResponse, error) {
	out := new(ListCableResponse)
	err := c.cc.Invoke(ctx, CableService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cableServiceClient) Link(ctx context.Context, in *LinkCableRequest, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, CableService_Link_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cableServiceClient) Clone(ctx context.Context, in *CloneCableRequest, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, CableService_Clone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cableServiceClient) ViewWithDeleted(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Cable, error) {
	out := new(pb.Cable)
	err := c.cc.Invoke(ctx, CableService_ViewWithDeleted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cableServiceClient) Pull(ctx context.Context, in *PullCableRequest, opts ...grpc.CallOption) (*PullCableResponse, error) {
	out := new(PullCableResponse)
	err := c.cc.Invoke(ctx, CableService_Pull_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CableServiceServer is the server API for CableService service.
// All implementations must embed UnimplementedCableServiceServer
// for forward compatibility
type CableServiceServer interface {
	Create(context.Context, *pb.Cable) (*pb.Cable, error)
	Update(context.Context, *pb.Cable) (*pb.Cable, error)
	View(context.Context, *pb.Id) (*pb.Cable, error)
	ViewByName(context.Context, *ViewCableByNameRequest) (*pb.Cable, error)
	ViewByNameFull(context.Context, *pb.Name) (*pb.Cable, error)
	Delete(context.Context, *pb.Id) (*pb.MyBool, error)
	List(context.Context, *ListCableRequest) (*ListCableResponse, error)
	Link(context.Context, *LinkCableRequest) (*pb.MyBool, error)
	Clone(context.Context, *CloneCableRequest) (*pb.MyBool, error)
	ViewWithDeleted(context.Context, *pb.Id) (*pb.Cable, error)
	Pull(context.Context, *PullCableRequest) (*PullCableResponse, error)
	mustEmbedUnimplementedCableServiceServer()
}

// UnimplementedCableServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCableServiceServer struct {
}

func (UnimplementedCableServiceServer) Create(context.Context, *pb.Cable) (*pb.Cable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCableServiceServer) Update(context.Context, *pb.Cable) (*pb.Cable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCableServiceServer) View(context.Context, *pb.Id) (*pb.Cable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedCableServiceServer) ViewByName(context.Context, *ViewCableByNameRequest) (*pb.Cable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewByName not implemented")
}
func (UnimplementedCableServiceServer) ViewByNameFull(context.Context, *pb.Name) (*pb.Cable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewByNameFull not implemented")
}
func (UnimplementedCableServiceServer) Delete(context.Context, *pb.Id) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCableServiceServer) List(context.Context, *ListCableRequest) (*ListCableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCableServiceServer) Link(context.Context, *LinkCableRequest) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (UnimplementedCableServiceServer) Clone(context.Context, *CloneCableRequest) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clone not implemented")
}
func (UnimplementedCableServiceServer) ViewWithDeleted(context.Context, *pb.Id) (*pb.Cable, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewWithDeleted not implemented")
}
func (UnimplementedCableServiceServer) Pull(context.Context, *PullCableRequest) (*PullCableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedCableServiceServer) mustEmbedUnimplementedCableServiceServer() {}

// UnsafeCableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CableServiceServer will
// result in compilation errors.
type UnsafeCableServiceServer interface {
	mustEmbedUnimplementedCableServiceServer()
}

func RegisterCableServiceServer(s grpc.ServiceRegistrar, srv CableServiceServer) {
	s.RegisterService(&CableService_ServiceDesc, srv)
}

func _CableService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Cable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CableServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CableService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CableServiceServer).Create(ctx, req.(*pb.Cable))
	}
	return interceptor(ctx, in, info, handler)
}

func _CableService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Cable)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CableServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CableService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CableServiceServer).Update(ctx, req.(*pb.Cable))
	}
	return interceptor(ctx, in, info, handler)
}

func _CableService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CableServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CableService_View_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CableServiceServer).View(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CableService_ViewByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewCableByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CableServiceServer).ViewByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CableService_ViewByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CableServiceServer).ViewByName(ctx, req.(*ViewCableByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CableService_ViewByNameFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CableServiceServer).ViewByNameFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CableService_ViewByNameFull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CableServiceServer).ViewByNameFull(ctx, req.(*pb.Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _CableService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CableServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CableService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CableServiceServer).Delete(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CableService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CableServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CableService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CableServiceServer).List(ctx, req.(*ListCableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CableService_Link_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkCableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CableServiceServer).Link(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CableService_Link_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CableServiceServer).Link(ctx, req.(*LinkCableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CableService_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneCableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CableServiceServer).Clone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CableService_Clone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CableServiceServer).Clone(ctx, req.(*CloneCableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CableService_ViewWithDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CableServiceServer).ViewWithDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CableService_ViewWithDeleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CableServiceServer).ViewWithDeleted(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _CableService_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullCableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CableServiceServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CableService_Pull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CableServiceServer).Pull(ctx, req.(*PullCableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CableService_ServiceDesc is the grpc.ServiceDesc for CableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cores.CableService",
	HandlerType: (*CableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CableService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CableService_Update_Handler,
		},
		{
			MethodName: "View",
			Handler:    _CableService_View_Handler,
		},
		{
			MethodName: "ViewByName",
			Handler:    _CableService_ViewByName_Handler,
		},
		{
			MethodName: "ViewByNameFull",
			Handler:    _CableService_ViewByNameFull_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CableService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CableService_List_Handler,
		},
		{
			MethodName: "Link",
			Handler:    _CableService_Link_Handler,
		},
		{
			MethodName: "Clone",
			Handler:    _CableService_Clone_Handler,
		},
		{
			MethodName: "ViewWithDeleted",
			Handler:    _CableService_ViewWithDeleted_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _CableService_Pull_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cores/cable_service.proto",
}

const (
	WireService_Create_FullMethodName                  = "/cores.WireService/Create"
	WireService_Update_FullMethodName                  = "/cores.WireService/Update"
	WireService_View_FullMethodName                    = "/cores.WireService/View"
	WireService_ViewByName_FullMethodName              = "/cores.WireService/ViewByName"
	WireService_ViewByNameFull_FullMethodName          = "/cores.WireService/ViewByNameFull"
	WireService_Delete_FullMethodName                  = "/cores.WireService/Delete"
	WireService_List_FullMethodName                    = "/cores.WireService/List"
	WireService_Clone_FullMethodName                   = "/cores.WireService/Clone"
	WireService_GetValue_FullMethodName                = "/cores.WireService/GetValue"
	WireService_SetValue_FullMethodName                = "/cores.WireService/SetValue"
	WireService_SetValueUnchecked_FullMethodName       = "/cores.WireService/SetValueUnchecked"
	WireService_SyncValue_FullMethodName               = "/cores.WireService/SyncValue"
	WireService_GetValueByName_FullMethodName          = "/cores.WireService/GetValueByName"
	WireService_SetValueByName_FullMethodName          = "/cores.WireService/SetValueByName"
	WireService_SetValueByNameUnchecked_FullMethodName = "/cores.WireService/SetValueByNameUnchecked"
	WireService_ViewWithDeleted_FullMethodName         = "/cores.WireService/ViewWithDeleted"
	WireService_Pull_FullMethodName                    = "/cores.WireService/Pull"
	WireService_ViewValue_FullMethodName               = "/cores.WireService/ViewValue"
	WireService_DeleteValue_FullMethodName             = "/cores.WireService/DeleteValue"
	WireService_PullValue_FullMethodName               = "/cores.WireService/PullValue"
)

// WireServiceClient is the client API for WireService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WireServiceClient interface {
	Create(ctx context.Context, in *pb.Wire, opts ...grpc.CallOption) (*pb.Wire, error)
	Update(ctx context.Context, in *pb.Wire, opts ...grpc.CallOption) (*pb.Wire, error)
	View(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Wire, error)
	ViewByName(ctx context.Context, in *ViewWireByNameRequest, opts ...grpc.CallOption) (*pb.Wire, error)
	ViewByNameFull(ctx context.Context, in *pb.Name, opts ...grpc.CallOption) (*pb.Wire, error)
	Delete(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error)
	List(ctx context.Context, in *ListWireRequest, opts ...grpc.CallOption) (*ListWireResponse, error)
	Clone(ctx context.Context, in *CloneWireRequest, opts ...grpc.CallOption) (*pb.MyBool, error)
	GetValue(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.WireValue, error)
	SetValue(ctx context.Context, in *pb.WireValue, opts ...grpc.CallOption) (*pb.MyBool, error)
	SetValueUnchecked(ctx context.Context, in *pb.WireValue, opts ...grpc.CallOption) (*pb.MyBool, error)
	SyncValue(ctx context.Context, in *pb.WireValue, opts ...grpc.CallOption) (*pb.MyBool, error)
	GetValueByName(ctx context.Context, in *GetWireValueByNameRequest, opts ...grpc.CallOption) (*WireNameValue, error)
	SetValueByName(ctx context.Context, in *WireNameValue, opts ...grpc.CallOption) (*pb.MyBool, error)
	SetValueByNameUnchecked(ctx context.Context, in *WireNameValue, opts ...grpc.CallOption) (*pb.MyBool, error)
	ViewWithDeleted(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Wire, error)
	Pull(ctx context.Context, in *PullWireRequest, opts ...grpc.CallOption) (*PullWireResponse, error)
	ViewValue(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.WireValueUpdated, error)
	DeleteValue(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error)
	PullValue(ctx context.Context, in *PullWireValueRequest, opts ...grpc.CallOption) (*PullWireValueResponse, error)
}

type wireServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWireServiceClient(cc grpc.ClientConnInterface) WireServiceClient {
	return &wireServiceClient{cc}
}

func (c *wireServiceClient) Create(ctx context.Context, in *pb.Wire, opts ...grpc.CallOption) (*pb.Wire, error) {
	out := new(pb.Wire)
	err := c.cc.Invoke(ctx, WireService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) Update(ctx context.Context, in *pb.Wire, opts ...grpc.CallOption) (*pb.Wire, error) {
	out := new(pb.Wire)
	err := c.cc.Invoke(ctx, WireService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) View(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Wire, error) {
	out := new(pb.Wire)
	err := c.cc.Invoke(ctx, WireService_View_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) ViewByName(ctx context.Context, in *ViewWireByNameRequest, opts ...grpc.CallOption) (*pb.Wire, error) {
	out := new(pb.Wire)
	err := c.cc.Invoke(ctx, WireService_ViewByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) ViewByNameFull(ctx context.Context, in *pb.Name, opts ...grpc.CallOption) (*pb.Wire, error) {
	out := new(pb.Wire)
	err := c.cc.Invoke(ctx, WireService_ViewByNameFull_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) Delete(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, WireService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) List(ctx context.Context, in *ListWireRequest, opts ...grpc.CallOption) (*ListWireResponse, error) {
	out := new(ListWireResponse)
	err := c.cc.Invoke(ctx, WireService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) Clone(ctx context.Context, in *CloneWireRequest, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, WireService_Clone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) GetValue(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.WireValue, error) {
	out := new(pb.WireValue)
	err := c.cc.Invoke(ctx, WireService_GetValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) SetValue(ctx context.Context, in *pb.WireValue, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, WireService_SetValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) SetValueUnchecked(ctx context.Context, in *pb.WireValue, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, WireService_SetValueUnchecked_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) SyncValue(ctx context.Context, in *pb.WireValue, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, WireService_SyncValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) GetValueByName(ctx context.Context, in *GetWireValueByNameRequest, opts ...grpc.CallOption) (*WireNameValue, error) {
	out := new(WireNameValue)
	err := c.cc.Invoke(ctx, WireService_GetValueByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) SetValueByName(ctx context.Context, in *WireNameValue, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, WireService_SetValueByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) SetValueByNameUnchecked(ctx context.Context, in *WireNameValue, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, WireService_SetValueByNameUnchecked_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) ViewWithDeleted(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Wire, error) {
	out := new(pb.Wire)
	err := c.cc.Invoke(ctx, WireService_ViewWithDeleted_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) Pull(ctx context.Context, in *PullWireRequest, opts ...grpc.CallOption) (*PullWireResponse, error) {
	out := new(PullWireResponse)
	err := c.cc.Invoke(ctx, WireService_Pull_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) ViewValue(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.WireValueUpdated, error) {
	out := new(pb.WireValueUpdated)
	err := c.cc.Invoke(ctx, WireService_ViewValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) DeleteValue(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, WireService_DeleteValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wireServiceClient) PullValue(ctx context.Context, in *PullWireValueRequest, opts ...grpc.CallOption) (*PullWireValueResponse, error) {
	out := new(PullWireValueResponse)
	err := c.cc.Invoke(ctx, WireService_PullValue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WireServiceServer is the server API for WireService service.
// All implementations must embed UnimplementedWireServiceServer
// for forward compatibility
type WireServiceServer interface {
	Create(context.Context, *pb.Wire) (*pb.Wire, error)
	Update(context.Context, *pb.Wire) (*pb.Wire, error)
	View(context.Context, *pb.Id) (*pb.Wire, error)
	ViewByName(context.Context, *ViewWireByNameRequest) (*pb.Wire, error)
	ViewByNameFull(context.Context, *pb.Name) (*pb.Wire, error)
	Delete(context.Context, *pb.Id) (*pb.MyBool, error)
	List(context.Context, *ListWireRequest) (*ListWireResponse, error)
	Clone(context.Context, *CloneWireRequest) (*pb.MyBool, error)
	GetValue(context.Context, *pb.Id) (*pb.WireValue, error)
	SetValue(context.Context, *pb.WireValue) (*pb.MyBool, error)
	SetValueUnchecked(context.Context, *pb.WireValue) (*pb.MyBool, error)
	SyncValue(context.Context, *pb.WireValue) (*pb.MyBool, error)
	GetValueByName(context.Context, *GetWireValueByNameRequest) (*WireNameValue, error)
	SetValueByName(context.Context, *WireNameValue) (*pb.MyBool, error)
	SetValueByNameUnchecked(context.Context, *WireNameValue) (*pb.MyBool, error)
	ViewWithDeleted(context.Context, *pb.Id) (*pb.Wire, error)
	Pull(context.Context, *PullWireRequest) (*PullWireResponse, error)
	ViewValue(context.Context, *pb.Id) (*pb.WireValueUpdated, error)
	DeleteValue(context.Context, *pb.Id) (*pb.MyBool, error)
	PullValue(context.Context, *PullWireValueRequest) (*PullWireValueResponse, error)
	mustEmbedUnimplementedWireServiceServer()
}

// UnimplementedWireServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWireServiceServer struct {
}

func (UnimplementedWireServiceServer) Create(context.Context, *pb.Wire) (*pb.Wire, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedWireServiceServer) Update(context.Context, *pb.Wire) (*pb.Wire, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedWireServiceServer) View(context.Context, *pb.Id) (*pb.Wire, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedWireServiceServer) ViewByName(context.Context, *ViewWireByNameRequest) (*pb.Wire, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewByName not implemented")
}
func (UnimplementedWireServiceServer) ViewByNameFull(context.Context, *pb.Name) (*pb.Wire, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewByNameFull not implemented")
}
func (UnimplementedWireServiceServer) Delete(context.Context, *pb.Id) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedWireServiceServer) List(context.Context, *ListWireRequest) (*ListWireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedWireServiceServer) Clone(context.Context, *CloneWireRequest) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clone not implemented")
}
func (UnimplementedWireServiceServer) GetValue(context.Context, *pb.Id) (*pb.WireValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValue not implemented")
}
func (UnimplementedWireServiceServer) SetValue(context.Context, *pb.WireValue) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValue not implemented")
}
func (UnimplementedWireServiceServer) SetValueUnchecked(context.Context, *pb.WireValue) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValueUnchecked not implemented")
}
func (UnimplementedWireServiceServer) SyncValue(context.Context, *pb.WireValue) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncValue not implemented")
}
func (UnimplementedWireServiceServer) GetValueByName(context.Context, *GetWireValueByNameRequest) (*WireNameValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValueByName not implemented")
}
func (UnimplementedWireServiceServer) SetValueByName(context.Context, *WireNameValue) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValueByName not implemented")
}
func (UnimplementedWireServiceServer) SetValueByNameUnchecked(context.Context, *WireNameValue) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetValueByNameUnchecked not implemented")
}
func (UnimplementedWireServiceServer) ViewWithDeleted(context.Context, *pb.Id) (*pb.Wire, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewWithDeleted not implemented")
}
func (UnimplementedWireServiceServer) Pull(context.Context, *PullWireRequest) (*PullWireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedWireServiceServer) ViewValue(context.Context, *pb.Id) (*pb.WireValueUpdated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewValue not implemented")
}
func (UnimplementedWireServiceServer) DeleteValue(context.Context, *pb.Id) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteValue not implemented")
}
func (UnimplementedWireServiceServer) PullValue(context.Context, *PullWireValueRequest) (*PullWireValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PullValue not implemented")
}
func (UnimplementedWireServiceServer) mustEmbedUnimplementedWireServiceServer() {}

// UnsafeWireServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WireServiceServer will
// result in compilation errors.
type UnsafeWireServiceServer interface {
	mustEmbedUnimplementedWireServiceServer()
}

func RegisterWireServiceServer(s grpc.ServiceRegistrar, srv WireServiceServer) {
	s.RegisterService(&WireService_ServiceDesc, srv)
}

func _WireService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Wire)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).Create(ctx, req.(*pb.Wire))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Wire)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).Update(ctx, req.(*pb.Wire))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_View_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).View(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_ViewByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewWireByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).ViewByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_ViewByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).ViewByName(ctx, req.(*ViewWireByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_ViewByNameFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).ViewByNameFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_ViewByNameFull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).ViewByNameFull(ctx, req.(*pb.Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).Delete(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).List(ctx, req.(*ListWireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneWireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).Clone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_Clone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).Clone(ctx, req.(*CloneWireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_GetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).GetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_GetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).GetValue(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_SetValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.WireValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).SetValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_SetValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).SetValue(ctx, req.(*pb.WireValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_SetValueUnchecked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.WireValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).SetValueUnchecked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_SetValueUnchecked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).SetValueUnchecked(ctx, req.(*pb.WireValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_SyncValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.WireValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).SyncValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_SyncValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).SyncValue(ctx, req.(*pb.WireValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_GetValueByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWireValueByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).GetValueByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_GetValueByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).GetValueByName(ctx, req.(*GetWireValueByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_SetValueByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WireNameValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).SetValueByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_SetValueByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).SetValueByName(ctx, req.(*WireNameValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_SetValueByNameUnchecked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WireNameValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).SetValueByNameUnchecked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_SetValueByNameUnchecked_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).SetValueByNameUnchecked(ctx, req.(*WireNameValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_ViewWithDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).ViewWithDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_ViewWithDeleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).ViewWithDeleted(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullWireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_Pull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).Pull(ctx, req.(*PullWireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_ViewValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).ViewValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_ViewValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).ViewValue(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_DeleteValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).DeleteValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_DeleteValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).DeleteValue(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _WireService_PullValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PullWireValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WireServiceServer).PullValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WireService_PullValue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WireServiceServer).PullValue(ctx, req.(*PullWireValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WireService_ServiceDesc is the grpc.ServiceDesc for WireService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WireService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cores.WireService",
	HandlerType: (*WireServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _WireService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _WireService_Update_Handler,
		},
		{
			MethodName: "View",
			Handler:    _WireService_View_Handler,
		},
		{
			MethodName: "ViewByName",
			Handler:    _WireService_ViewByName_Handler,
		},
		{
			MethodName: "ViewByNameFull",
			Handler:    _WireService_ViewByNameFull_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _WireService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _WireService_List_Handler,
		},
		{
			MethodName: "Clone",
			Handler:    _WireService_Clone_Handler,
		},
		{
			MethodName: "GetValue",
			Handler:    _WireService_GetValue_Handler,
		},
		{
			MethodName: "SetValue",
			Handler:    _WireService_SetValue_Handler,
		},
		{
			MethodName: "SetValueUnchecked",
			Handler:    _WireService_SetValueUnchecked_Handler,
		},
		{
			MethodName: "SyncValue",
			Handler:    _WireService_SyncValue_Handler,
		},
		{
			MethodName: "GetValueByName",
			Handler:    _WireService_GetValueByName_Handler,
		},
		{
			MethodName: "SetValueByName",
			Handler:    _WireService_SetValueByName_Handler,
		},
		{
			MethodName: "SetValueByNameUnchecked",
			Handler:    _WireService_SetValueByNameUnchecked_Handler,
		},
		{
			MethodName: "ViewWithDeleted",
			Handler:    _WireService_ViewWithDeleted_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _WireService_Pull_Handler,
		},
		{
			MethodName: "ViewValue",
			Handler:    _WireService_ViewValue_Handler,
		},
		{
			MethodName: "DeleteValue",
			Handler:    _WireService_DeleteValue_Handler,
		},
		{
			MethodName: "PullValue",
			Handler:    _WireService_PullValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cores/cable_service.proto",
}
