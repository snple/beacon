// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: cores/jumper_service.proto

package cores

import (
	context "context"
	pb "github.com/snple/kokomi/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JumperServiceClient is the client API for JumperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JumperServiceClient interface {
	Create(ctx context.Context, in *Jumper, opts ...grpc.CallOption) (*Jumper, error)
	Update(ctx context.Context, in *Jumper, opts ...grpc.CallOption) (*Jumper, error)
	View(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*Jumper, error)
	ViewByName(ctx context.Context, in *pb.Name, opts ...grpc.CallOption) (*Jumper, error)
	Delete(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error)
	List(ctx context.Context, in *ListJumperRequest, opts ...grpc.CallOption) (*ListJumperResponse, error)
}

type jumperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJumperServiceClient(cc grpc.ClientConnInterface) JumperServiceClient {
	return &jumperServiceClient{cc}
}

func (c *jumperServiceClient) Create(ctx context.Context, in *Jumper, opts ...grpc.CallOption) (*Jumper, error) {
	out := new(Jumper)
	err := c.cc.Invoke(ctx, "/cores.JumperService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jumperServiceClient) Update(ctx context.Context, in *Jumper, opts ...grpc.CallOption) (*Jumper, error) {
	out := new(Jumper)
	err := c.cc.Invoke(ctx, "/cores.JumperService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jumperServiceClient) View(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*Jumper, error) {
	out := new(Jumper)
	err := c.cc.Invoke(ctx, "/cores.JumperService/View", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jumperServiceClient) ViewByName(ctx context.Context, in *pb.Name, opts ...grpc.CallOption) (*Jumper, error) {
	out := new(Jumper)
	err := c.cc.Invoke(ctx, "/cores.JumperService/ViewByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jumperServiceClient) Delete(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error) {
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, "/cores.JumperService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jumperServiceClient) List(ctx context.Context, in *ListJumperRequest, opts ...grpc.CallOption) (*ListJumperResponse, error) {
	out := new(ListJumperResponse)
	err := c.cc.Invoke(ctx, "/cores.JumperService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JumperServiceServer is the server API for JumperService service.
// All implementations must embed UnimplementedJumperServiceServer
// for forward compatibility
type JumperServiceServer interface {
	Create(context.Context, *Jumper) (*Jumper, error)
	Update(context.Context, *Jumper) (*Jumper, error)
	View(context.Context, *pb.Id) (*Jumper, error)
	ViewByName(context.Context, *pb.Name) (*Jumper, error)
	Delete(context.Context, *pb.Id) (*pb.MyBool, error)
	List(context.Context, *ListJumperRequest) (*ListJumperResponse, error)
	mustEmbedUnimplementedJumperServiceServer()
}

// UnimplementedJumperServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJumperServiceServer struct {
}

func (UnimplementedJumperServiceServer) Create(context.Context, *Jumper) (*Jumper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedJumperServiceServer) Update(context.Context, *Jumper) (*Jumper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedJumperServiceServer) View(context.Context, *pb.Id) (*Jumper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedJumperServiceServer) ViewByName(context.Context, *pb.Name) (*Jumper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewByName not implemented")
}
func (UnimplementedJumperServiceServer) Delete(context.Context, *pb.Id) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedJumperServiceServer) List(context.Context, *ListJumperRequest) (*ListJumperResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedJumperServiceServer) mustEmbedUnimplementedJumperServiceServer() {}

// UnsafeJumperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JumperServiceServer will
// result in compilation errors.
type UnsafeJumperServiceServer interface {
	mustEmbedUnimplementedJumperServiceServer()
}

func RegisterJumperServiceServer(s grpc.ServiceRegistrar, srv JumperServiceServer) {
	s.RegisterService(&JumperService_ServiceDesc, srv)
}

func _JumperService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jumper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JumperServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.JumperService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JumperServiceServer).Create(ctx, req.(*Jumper))
	}
	return interceptor(ctx, in, info, handler)
}

func _JumperService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Jumper)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JumperServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.JumperService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JumperServiceServer).Update(ctx, req.(*Jumper))
	}
	return interceptor(ctx, in, info, handler)
}

func _JumperService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JumperServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.JumperService/View",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JumperServiceServer).View(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _JumperService_ViewByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JumperServiceServer).ViewByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.JumperService/ViewByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JumperServiceServer).ViewByName(ctx, req.(*pb.Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _JumperService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JumperServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.JumperService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JumperServiceServer).Delete(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _JumperService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJumperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JumperServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cores.JumperService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JumperServiceServer).List(ctx, req.(*ListJumperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JumperService_ServiceDesc is the grpc.ServiceDesc for JumperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JumperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cores.JumperService",
	HandlerType: (*JumperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _JumperService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _JumperService_Update_Handler,
		},
		{
			MethodName: "View",
			Handler:    _JumperService_View_Handler,
		},
		{
			MethodName: "ViewByName",
			Handler:    _JumperService_ViewByName_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _JumperService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _JumperService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cores/jumper_service.proto",
}
