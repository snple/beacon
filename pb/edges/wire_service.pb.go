// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v3.21.12
// source: edges/wire_service.proto

package edges

import (
	pb "github.com/snple/beacon/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// wire
type WireListRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Page  *pb.Page               `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	// string node_id = 2;
	Tags          string `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Source        string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WireListRequest) Reset() {
	*x = WireListRequest{}
	mi := &file_edges_wire_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WireListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireListRequest) ProtoMessage() {}

func (x *WireListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edges_wire_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireListRequest.ProtoReflect.Descriptor instead.
func (*WireListRequest) Descriptor() ([]byte, []int) {
	return file_edges_wire_service_proto_rawDescGZIP(), []int{0}
}

func (x *WireListRequest) GetPage() *pb.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *WireListRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *WireListRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type WireListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *pb.Page               `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Count         uint32                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Wires         []*pb.Wire             `protobuf:"bytes,3,rep,name=wires,proto3" json:"wires,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WireListResponse) Reset() {
	*x = WireListResponse{}
	mi := &file_edges_wire_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WireListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireListResponse) ProtoMessage() {}

func (x *WireListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edges_wire_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireListResponse.ProtoReflect.Descriptor instead.
func (*WireListResponse) Descriptor() ([]byte, []int) {
	return file_edges_wire_service_proto_rawDescGZIP(), []int{1}
}

func (x *WireListResponse) GetPage() *pb.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *WireListResponse) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *WireListResponse) GetWires() []*pb.Wire {
	if x != nil {
		return x.Wires
	}
	return nil
}

type WireCloneRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // string node_id = 2;
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WireCloneRequest) Reset() {
	*x = WireCloneRequest{}
	mi := &file_edges_wire_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WireCloneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireCloneRequest) ProtoMessage() {}

func (x *WireCloneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edges_wire_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireCloneRequest.ProtoReflect.Descriptor instead.
func (*WireCloneRequest) Descriptor() ([]byte, []int) {
	return file_edges_wire_service_proto_rawDescGZIP(), []int{2}
}

func (x *WireCloneRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type WirePullRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	After int64                  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// string node_id = 3;
	Source        string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WirePullRequest) Reset() {
	*x = WirePullRequest{}
	mi := &file_edges_wire_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WirePullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirePullRequest) ProtoMessage() {}

func (x *WirePullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edges_wire_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirePullRequest.ProtoReflect.Descriptor instead.
func (*WirePullRequest) Descriptor() ([]byte, []int) {
	return file_edges_wire_service_proto_rawDescGZIP(), []int{3}
}

func (x *WirePullRequest) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *WirePullRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *WirePullRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type WirePullResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	After         int64                  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit         uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Wires         []*pb.Wire             `protobuf:"bytes,3,rep,name=wires,proto3" json:"wires,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WirePullResponse) Reset() {
	*x = WirePullResponse{}
	mi := &file_edges_wire_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WirePullResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WirePullResponse) ProtoMessage() {}

func (x *WirePullResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edges_wire_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WirePullResponse.ProtoReflect.Descriptor instead.
func (*WirePullResponse) Descriptor() ([]byte, []int) {
	return file_edges_wire_service_proto_rawDescGZIP(), []int{4}
}

func (x *WirePullResponse) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *WirePullResponse) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *WirePullResponse) GetWires() []*pb.Wire {
	if x != nil {
		return x.Wires
	}
	return nil
}

// pin
type PinListRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Page  *pb.Page               `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	// string node_id = 2;
	WireId        string `protobuf:"bytes,3,opt,name=wire_id,json=wireId,proto3" json:"wire_id,omitempty"`
	Tags          string `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PinListRequest) Reset() {
	*x = PinListRequest{}
	mi := &file_edges_wire_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PinListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinListRequest) ProtoMessage() {}

func (x *PinListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edges_wire_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinListRequest.ProtoReflect.Descriptor instead.
func (*PinListRequest) Descriptor() ([]byte, []int) {
	return file_edges_wire_service_proto_rawDescGZIP(), []int{5}
}

func (x *PinListRequest) GetPage() *pb.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *PinListRequest) GetWireId() string {
	if x != nil {
		return x.WireId
	}
	return ""
}

func (x *PinListRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

type PinListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *pb.Page               `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Count         uint32                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Pins          []*pb.Pin              `protobuf:"bytes,3,rep,name=pins,proto3" json:"pins,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PinListResponse) Reset() {
	*x = PinListResponse{}
	mi := &file_edges_wire_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PinListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinListResponse) ProtoMessage() {}

func (x *PinListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edges_wire_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinListResponse.ProtoReflect.Descriptor instead.
func (*PinListResponse) Descriptor() ([]byte, []int) {
	return file_edges_wire_service_proto_rawDescGZIP(), []int{6}
}

func (x *PinListResponse) GetPage() *pb.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *PinListResponse) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PinListResponse) GetPins() []*pb.Pin {
	if x != nil {
		return x.Pins
	}
	return nil
}

type PinCloneRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	WireId        string                 `protobuf:"bytes,2,opt,name=wire_id,json=wireId,proto3" json:"wire_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PinCloneRequest) Reset() {
	*x = PinCloneRequest{}
	mi := &file_edges_wire_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PinCloneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinCloneRequest) ProtoMessage() {}

func (x *PinCloneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edges_wire_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinCloneRequest.ProtoReflect.Descriptor instead.
func (*PinCloneRequest) Descriptor() ([]byte, []int) {
	return file_edges_wire_service_proto_rawDescGZIP(), []int{7}
}

func (x *PinCloneRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PinCloneRequest) GetWireId() string {
	if x != nil {
		return x.WireId
	}
	return ""
}

type PinPullRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	After int64                  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// string node_id = 3;
	WireId        string `protobuf:"bytes,4,opt,name=wire_id,json=wireId,proto3" json:"wire_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PinPullRequest) Reset() {
	*x = PinPullRequest{}
	mi := &file_edges_wire_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PinPullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinPullRequest) ProtoMessage() {}

func (x *PinPullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edges_wire_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinPullRequest.ProtoReflect.Descriptor instead.
func (*PinPullRequest) Descriptor() ([]byte, []int) {
	return file_edges_wire_service_proto_rawDescGZIP(), []int{8}
}

func (x *PinPullRequest) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *PinPullRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PinPullRequest) GetWireId() string {
	if x != nil {
		return x.WireId
	}
	return ""
}

type PinPullResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	After         int64                  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit         uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Pins          []*pb.Pin              `protobuf:"bytes,3,rep,name=pins,proto3" json:"pins,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PinPullResponse) Reset() {
	*x = PinPullResponse{}
	mi := &file_edges_wire_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PinPullResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinPullResponse) ProtoMessage() {}

func (x *PinPullResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edges_wire_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinPullResponse.ProtoReflect.Descriptor instead.
func (*PinPullResponse) Descriptor() ([]byte, []int) {
	return file_edges_wire_service_proto_rawDescGZIP(), []int{9}
}

func (x *PinPullResponse) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *PinPullResponse) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PinPullResponse) GetPins() []*pb.Pin {
	if x != nil {
		return x.Pins
	}
	return nil
}

type PinPullValueRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	After int64                  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// string node_id = 3;
	WireId        string `protobuf:"bytes,4,opt,name=wire_id,json=wireId,proto3" json:"wire_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PinPullValueRequest) Reset() {
	*x = PinPullValueRequest{}
	mi := &file_edges_wire_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PinPullValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinPullValueRequest) ProtoMessage() {}

func (x *PinPullValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edges_wire_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinPullValueRequest.ProtoReflect.Descriptor instead.
func (*PinPullValueRequest) Descriptor() ([]byte, []int) {
	return file_edges_wire_service_proto_rawDescGZIP(), []int{10}
}

func (x *PinPullValueRequest) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *PinPullValueRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PinPullValueRequest) GetWireId() string {
	if x != nil {
		return x.WireId
	}
	return ""
}

type PinPullValueResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	After         int64                  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit         uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Pins          []*pb.PinValueUpdated  `protobuf:"bytes,3,rep,name=pins,proto3" json:"pins,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PinPullValueResponse) Reset() {
	*x = PinPullValueResponse{}
	mi := &file_edges_wire_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PinPullValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinPullValueResponse) ProtoMessage() {}

func (x *PinPullValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edges_wire_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinPullValueResponse.ProtoReflect.Descriptor instead.
func (*PinPullValueResponse) Descriptor() ([]byte, []int) {
	return file_edges_wire_service_proto_rawDescGZIP(), []int{11}
}

func (x *PinPullValueResponse) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *PinPullValueResponse) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PinPullValueResponse) GetPins() []*pb.PinValueUpdated {
	if x != nil {
		return x.Pins
	}
	return nil
}

var File_edges_wire_service_proto protoreflect.FileDescriptor

var file_edges_wire_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x65, 0x64, 0x67, 0x65,
	0x73, 0x1a, 0x12, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x0f,
	0x57, 0x69, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x66, 0x0a, 0x10, 0x57, 0x69, 0x72,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x05, 0x77, 0x69, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x52, 0x05, 0x77, 0x69, 0x72, 0x65,
	0x73, 0x22, 0x22, 0x0a, 0x10, 0x57, 0x69, 0x72, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x0f, 0x57, 0x69, 0x72, 0x65, 0x50, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x5e, 0x0a, 0x10,
	0x57, 0x69, 0x72, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x05,
	0x77, 0x69, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62,
	0x2e, 0x57, 0x69, 0x72, 0x65, 0x52, 0x05, 0x77, 0x69, 0x72, 0x65, 0x73, 0x22, 0x5b, 0x0a, 0x0e,
	0x50, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x77, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77,
	0x69, 0x72, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x62, 0x0a, 0x0f, 0x50, 0x69, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04,
	0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1b, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x73, 0x22, 0x3a, 0x0a,
	0x0f, 0x50, 0x69, 0x6e, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x77, 0x69, 0x72, 0x65, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x0e, 0x50, 0x69, 0x6e,
	0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x69, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x69, 0x72, 0x65, 0x49, 0x64,
	0x22, 0x5a, 0x0a, 0x0f, 0x50, 0x69, 0x6e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1b, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x52, 0x04, 0x70, 0x69, 0x6e, 0x73, 0x22, 0x5a, 0x0a, 0x13,
	0x50, 0x69, 0x6e, 0x50, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x77, 0x69, 0x72, 0x65, 0x49, 0x64, 0x22, 0x6b, 0x0a, 0x14, 0x50, 0x69, 0x6e, 0x50,
	0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x04,
	0x70, 0x69, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x04, 0x70, 0x69, 0x6e, 0x73, 0x32, 0x94, 0x03, 0x0a, 0x0b, 0x57, 0x69, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x08, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x1a, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x57,
	0x69, 0x72, 0x65, 0x22, 0x00, 0x12, 0x1e, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x08, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x1a, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x57,
	0x69, 0x72, 0x65, 0x22, 0x00, 0x12, 0x1a, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x06, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x22,
	0x00, 0x12, 0x1c, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x22, 0x00, 0x12,
	0x1e, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x64, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12,
	0x39, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2e,
	0x57, 0x69, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x05, 0x43, 0x6c,
	0x6f, 0x6e, 0x65, 0x12, 0x17, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x57, 0x69, 0x72, 0x65,
	0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x0f, 0x56, 0x69,
	0x65, 0x77, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x06, 0x2e,
	0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x22,
	0x00, 0x12, 0x39, 0x0a, 0x04, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x73, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x50, 0x75,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x1e, 0x0a, 0x04,
	0x53, 0x79, 0x6e, 0x63, 0x12, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x1a, 0x0a,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xe6, 0x08, 0x0a,
	0x0a, 0x50, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x06, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x1a, 0x07,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x22, 0x00, 0x12, 0x1c, 0x0a, 0x06, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x1a, 0x07, 0x2e, 0x70,
	0x62, 0x2e, 0x50, 0x69, 0x6e, 0x22, 0x00, 0x12, 0x19, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e,
	0x22, 0x00, 0x12, 0x1b, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x08, 0x2e, 0x70, 0x62, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x22, 0x00, 0x12,
	0x1e, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x64, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12,
	0x37, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2e,
	0x50, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x6e,
	0x65, 0x12, 0x16, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d,
	0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x0f, 0x56, 0x69, 0x65, 0x77, 0x57,
	0x69, 0x74, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e,
	0x49, 0x64, 0x1a, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x22, 0x00, 0x12, 0x37, 0x0a,
	0x04, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x15, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x69,
	0x6e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65,
	0x64, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x1d, 0x0a, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x07,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x50,
	0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x08, 0x53, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x12, 0x2e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x10, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x00, 0x12, 0x30, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x09, 0x56, 0x69, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x00, 0x12,
	0x23, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x06,
	0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x09, 0x50, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1a, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x50, 0x75, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x50, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x09,
	0x53, 0x79, 0x6e, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x50,
	0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x50,
	0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x08, 0x53, 0x65, 0x74,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x12, 0x2e, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x10, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x00, 0x12, 0x30, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f,
	0x6c, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x09, 0x56, 0x69, 0x65, 0x77, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x69,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x00, 0x12,
	0x23, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x06,
	0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x09, 0x50, 0x75, 0x6c, 0x6c, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x12, 0x1a, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x50, 0x75, 0x6c,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x50, 0x69, 0x6e, 0x50, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x09,
	0x53, 0x79, 0x6e, 0x63, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x50,
	0x69, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x70, 0x6c, 0x65, 0x2f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e,
	0x2f, 0x70, 0x62, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x73, 0x3b, 0x65, 0x64, 0x67, 0x65, 0x73, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_edges_wire_service_proto_rawDescOnce sync.Once
	file_edges_wire_service_proto_rawDescData = file_edges_wire_service_proto_rawDesc
)

func file_edges_wire_service_proto_rawDescGZIP() []byte {
	file_edges_wire_service_proto_rawDescOnce.Do(func() {
		file_edges_wire_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_edges_wire_service_proto_rawDescData)
	})
	return file_edges_wire_service_proto_rawDescData
}

var file_edges_wire_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_edges_wire_service_proto_goTypes = []any{
	(*WireListRequest)(nil),      // 0: edges.WireListRequest
	(*WireListResponse)(nil),     // 1: edges.WireListResponse
	(*WireCloneRequest)(nil),     // 2: edges.WireCloneRequest
	(*WirePullRequest)(nil),      // 3: edges.WirePullRequest
	(*WirePullResponse)(nil),     // 4: edges.WirePullResponse
	(*PinListRequest)(nil),       // 5: edges.PinListRequest
	(*PinListResponse)(nil),      // 6: edges.PinListResponse
	(*PinCloneRequest)(nil),      // 7: edges.PinCloneRequest
	(*PinPullRequest)(nil),       // 8: edges.PinPullRequest
	(*PinPullResponse)(nil),      // 9: edges.PinPullResponse
	(*PinPullValueRequest)(nil),  // 10: edges.PinPullValueRequest
	(*PinPullValueResponse)(nil), // 11: edges.PinPullValueResponse
	(*pb.Page)(nil),              // 12: pb.Page
	(*pb.Wire)(nil),              // 13: pb.Wire
	(*pb.Pin)(nil),               // 14: pb.Pin
	(*pb.PinValueUpdated)(nil),   // 15: pb.PinValueUpdated
	(*pb.Id)(nil),                // 16: pb.Id
	(*pb.Name)(nil),              // 17: pb.Name
	(*pb.PinValue)(nil),          // 18: pb.PinValue
	(*pb.PinNameValue)(nil),      // 19: pb.PinNameValue
	(*pb.MyBool)(nil),            // 20: pb.MyBool
}
var file_edges_wire_service_proto_depIdxs = []int32{
	12, // 0: edges.WireListRequest.page:type_name -> pb.Page
	12, // 1: edges.WireListResponse.page:type_name -> pb.Page
	13, // 2: edges.WireListResponse.wires:type_name -> pb.Wire
	13, // 3: edges.WirePullResponse.wires:type_name -> pb.Wire
	12, // 4: edges.PinListRequest.page:type_name -> pb.Page
	12, // 5: edges.PinListResponse.page:type_name -> pb.Page
	14, // 6: edges.PinListResponse.pins:type_name -> pb.Pin
	14, // 7: edges.PinPullResponse.pins:type_name -> pb.Pin
	15, // 8: edges.PinPullValueResponse.pins:type_name -> pb.PinValueUpdated
	13, // 9: edges.WireService.Create:input_type -> pb.Wire
	13, // 10: edges.WireService.Update:input_type -> pb.Wire
	16, // 11: edges.WireService.View:input_type -> pb.Id
	17, // 12: edges.WireService.Name:input_type -> pb.Name
	16, // 13: edges.WireService.Delete:input_type -> pb.Id
	0,  // 14: edges.WireService.List:input_type -> edges.WireListRequest
	2,  // 15: edges.WireService.Clone:input_type -> edges.WireCloneRequest
	16, // 16: edges.WireService.ViewWithDeleted:input_type -> pb.Id
	3,  // 17: edges.WireService.Pull:input_type -> edges.WirePullRequest
	13, // 18: edges.WireService.Sync:input_type -> pb.Wire
	14, // 19: edges.PinService.Create:input_type -> pb.Pin
	14, // 20: edges.PinService.Update:input_type -> pb.Pin
	16, // 21: edges.PinService.View:input_type -> pb.Id
	17, // 22: edges.PinService.Name:input_type -> pb.Name
	16, // 23: edges.PinService.Delete:input_type -> pb.Id
	5,  // 24: edges.PinService.List:input_type -> edges.PinListRequest
	7,  // 25: edges.PinService.Clone:input_type -> edges.PinCloneRequest
	16, // 26: edges.PinService.ViewWithDeleted:input_type -> pb.Id
	8,  // 27: edges.PinService.Pull:input_type -> edges.PinPullRequest
	14, // 28: edges.PinService.Sync:input_type -> pb.Pin
	16, // 29: edges.PinService.GetValue:input_type -> pb.Id
	18, // 30: edges.PinService.SetValue:input_type -> pb.PinValue
	17, // 31: edges.PinService.GetValueByName:input_type -> pb.Name
	19, // 32: edges.PinService.SetValueByName:input_type -> pb.PinNameValue
	16, // 33: edges.PinService.ViewValue:input_type -> pb.Id
	16, // 34: edges.PinService.DeleteValue:input_type -> pb.Id
	10, // 35: edges.PinService.PullValue:input_type -> edges.PinPullValueRequest
	18, // 36: edges.PinService.SyncValue:input_type -> pb.PinValue
	16, // 37: edges.PinService.GetWrite:input_type -> pb.Id
	18, // 38: edges.PinService.SetWrite:input_type -> pb.PinValue
	17, // 39: edges.PinService.GetWriteByName:input_type -> pb.Name
	19, // 40: edges.PinService.SetWriteByName:input_type -> pb.PinNameValue
	16, // 41: edges.PinService.ViewWrite:input_type -> pb.Id
	16, // 42: edges.PinService.DeleteWrite:input_type -> pb.Id
	10, // 43: edges.PinService.PullWrite:input_type -> edges.PinPullValueRequest
	18, // 44: edges.PinService.SyncWrite:input_type -> pb.PinValue
	13, // 45: edges.WireService.Create:output_type -> pb.Wire
	13, // 46: edges.WireService.Update:output_type -> pb.Wire
	13, // 47: edges.WireService.View:output_type -> pb.Wire
	13, // 48: edges.WireService.Name:output_type -> pb.Wire
	20, // 49: edges.WireService.Delete:output_type -> pb.MyBool
	1,  // 50: edges.WireService.List:output_type -> edges.WireListResponse
	20, // 51: edges.WireService.Clone:output_type -> pb.MyBool
	13, // 52: edges.WireService.ViewWithDeleted:output_type -> pb.Wire
	4,  // 53: edges.WireService.Pull:output_type -> edges.WirePullResponse
	20, // 54: edges.WireService.Sync:output_type -> pb.MyBool
	14, // 55: edges.PinService.Create:output_type -> pb.Pin
	14, // 56: edges.PinService.Update:output_type -> pb.Pin
	14, // 57: edges.PinService.View:output_type -> pb.Pin
	14, // 58: edges.PinService.Name:output_type -> pb.Pin
	20, // 59: edges.PinService.Delete:output_type -> pb.MyBool
	6,  // 60: edges.PinService.List:output_type -> edges.PinListResponse
	20, // 61: edges.PinService.Clone:output_type -> pb.MyBool
	14, // 62: edges.PinService.ViewWithDeleted:output_type -> pb.Pin
	9,  // 63: edges.PinService.Pull:output_type -> edges.PinPullResponse
	20, // 64: edges.PinService.Sync:output_type -> pb.MyBool
	18, // 65: edges.PinService.GetValue:output_type -> pb.PinValue
	20, // 66: edges.PinService.SetValue:output_type -> pb.MyBool
	19, // 67: edges.PinService.GetValueByName:output_type -> pb.PinNameValue
	20, // 68: edges.PinService.SetValueByName:output_type -> pb.MyBool
	15, // 69: edges.PinService.ViewValue:output_type -> pb.PinValueUpdated
	20, // 70: edges.PinService.DeleteValue:output_type -> pb.MyBool
	11, // 71: edges.PinService.PullValue:output_type -> edges.PinPullValueResponse
	20, // 72: edges.PinService.SyncValue:output_type -> pb.MyBool
	18, // 73: edges.PinService.GetWrite:output_type -> pb.PinValue
	20, // 74: edges.PinService.SetWrite:output_type -> pb.MyBool
	19, // 75: edges.PinService.GetWriteByName:output_type -> pb.PinNameValue
	20, // 76: edges.PinService.SetWriteByName:output_type -> pb.MyBool
	15, // 77: edges.PinService.ViewWrite:output_type -> pb.PinValueUpdated
	20, // 78: edges.PinService.DeleteWrite:output_type -> pb.MyBool
	11, // 79: edges.PinService.PullWrite:output_type -> edges.PinPullValueResponse
	20, // 80: edges.PinService.SyncWrite:output_type -> pb.MyBool
	45, // [45:81] is the sub-list for method output_type
	9,  // [9:45] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_edges_wire_service_proto_init() }
func file_edges_wire_service_proto_init() {
	if File_edges_wire_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_edges_wire_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_edges_wire_service_proto_goTypes,
		DependencyIndexes: file_edges_wire_service_proto_depIdxs,
		MessageInfos:      file_edges_wire_service_proto_msgTypes,
	}.Build()
	File_edges_wire_service_proto = out.File
	file_edges_wire_service_proto_rawDesc = nil
	file_edges_wire_service_proto_goTypes = nil
	file_edges_wire_service_proto_depIdxs = nil
}
