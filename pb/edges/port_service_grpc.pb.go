// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: edges/port_service.proto

package edges

import (
	context "context"
	pb "github.com/snple/kokomi/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PortService_Create_FullMethodName          = "/edges.PortService/Create"
	PortService_Update_FullMethodName          = "/edges.PortService/Update"
	PortService_View_FullMethodName            = "/edges.PortService/View"
	PortService_Name_FullMethodName            = "/edges.PortService/Name"
	PortService_Delete_FullMethodName          = "/edges.PortService/Delete"
	PortService_List_FullMethodName            = "/edges.PortService/List"
	PortService_Link_FullMethodName            = "/edges.PortService/Link"
	PortService_Clone_FullMethodName           = "/edges.PortService/Clone"
	PortService_ViewWithDeleted_FullMethodName = "/edges.PortService/ViewWithDeleted"
	PortService_Pull_FullMethodName            = "/edges.PortService/Pull"
	PortService_Sync_FullMethodName            = "/edges.PortService/Sync"
)

// PortServiceClient is the client API for PortService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortServiceClient interface {
	Create(ctx context.Context, in *pb.Port, opts ...grpc.CallOption) (*pb.Port, error)
	Update(ctx context.Context, in *pb.Port, opts ...grpc.CallOption) (*pb.Port, error)
	View(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Port, error)
	Name(ctx context.Context, in *pb.Name, opts ...grpc.CallOption) (*pb.Port, error)
	Delete(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error)
	List(ctx context.Context, in *PortListRequest, opts ...grpc.CallOption) (*PortListResponse, error)
	Link(ctx context.Context, in *PortLinkRequest, opts ...grpc.CallOption) (*pb.MyBool, error)
	Clone(ctx context.Context, in *PortCloneRequest, opts ...grpc.CallOption) (*pb.MyBool, error)
	ViewWithDeleted(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Port, error)
	Pull(ctx context.Context, in *PortPullRequest, opts ...grpc.CallOption) (*PortPullResponse, error)
	Sync(ctx context.Context, in *pb.Port, opts ...grpc.CallOption) (*pb.MyBool, error)
}

type portServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortServiceClient(cc grpc.ClientConnInterface) PortServiceClient {
	return &portServiceClient{cc}
}

func (c *portServiceClient) Create(ctx context.Context, in *pb.Port, opts ...grpc.CallOption) (*pb.Port, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.Port)
	err := c.cc.Invoke(ctx, PortService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) Update(ctx context.Context, in *pb.Port, opts ...grpc.CallOption) (*pb.Port, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.Port)
	err := c.cc.Invoke(ctx, PortService_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) View(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Port, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.Port)
	err := c.cc.Invoke(ctx, PortService_View_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) Name(ctx context.Context, in *pb.Name, opts ...grpc.CallOption) (*pb.Port, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.Port)
	err := c.cc.Invoke(ctx, PortService_Name_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) Delete(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.MyBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, PortService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) List(ctx context.Context, in *PortListRequest, opts ...grpc.CallOption) (*PortListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PortListResponse)
	err := c.cc.Invoke(ctx, PortService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) Link(ctx context.Context, in *PortLinkRequest, opts ...grpc.CallOption) (*pb.MyBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, PortService_Link_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) Clone(ctx context.Context, in *PortCloneRequest, opts ...grpc.CallOption) (*pb.MyBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, PortService_Clone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) ViewWithDeleted(ctx context.Context, in *pb.Id, opts ...grpc.CallOption) (*pb.Port, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.Port)
	err := c.cc.Invoke(ctx, PortService_ViewWithDeleted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) Pull(ctx context.Context, in *PortPullRequest, opts ...grpc.CallOption) (*PortPullResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PortPullResponse)
	err := c.cc.Invoke(ctx, PortService_Pull_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portServiceClient) Sync(ctx context.Context, in *pb.Port, opts ...grpc.CallOption) (*pb.MyBool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.MyBool)
	err := c.cc.Invoke(ctx, PortService_Sync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortServiceServer is the server API for PortService service.
// All implementations must embed UnimplementedPortServiceServer
// for forward compatibility.
type PortServiceServer interface {
	Create(context.Context, *pb.Port) (*pb.Port, error)
	Update(context.Context, *pb.Port) (*pb.Port, error)
	View(context.Context, *pb.Id) (*pb.Port, error)
	Name(context.Context, *pb.Name) (*pb.Port, error)
	Delete(context.Context, *pb.Id) (*pb.MyBool, error)
	List(context.Context, *PortListRequest) (*PortListResponse, error)
	Link(context.Context, *PortLinkRequest) (*pb.MyBool, error)
	Clone(context.Context, *PortCloneRequest) (*pb.MyBool, error)
	ViewWithDeleted(context.Context, *pb.Id) (*pb.Port, error)
	Pull(context.Context, *PortPullRequest) (*PortPullResponse, error)
	Sync(context.Context, *pb.Port) (*pb.MyBool, error)
	mustEmbedUnimplementedPortServiceServer()
}

// UnimplementedPortServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPortServiceServer struct{}

func (UnimplementedPortServiceServer) Create(context.Context, *pb.Port) (*pb.Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedPortServiceServer) Update(context.Context, *pb.Port) (*pb.Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedPortServiceServer) View(context.Context, *pb.Id) (*pb.Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedPortServiceServer) Name(context.Context, *pb.Name) (*pb.Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Name not implemented")
}
func (UnimplementedPortServiceServer) Delete(context.Context, *pb.Id) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedPortServiceServer) List(context.Context, *PortListRequest) (*PortListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPortServiceServer) Link(context.Context, *PortLinkRequest) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Link not implemented")
}
func (UnimplementedPortServiceServer) Clone(context.Context, *PortCloneRequest) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clone not implemented")
}
func (UnimplementedPortServiceServer) ViewWithDeleted(context.Context, *pb.Id) (*pb.Port, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewWithDeleted not implemented")
}
func (UnimplementedPortServiceServer) Pull(context.Context, *PortPullRequest) (*PortPullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pull not implemented")
}
func (UnimplementedPortServiceServer) Sync(context.Context, *pb.Port) (*pb.MyBool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedPortServiceServer) mustEmbedUnimplementedPortServiceServer() {}
func (UnimplementedPortServiceServer) testEmbeddedByValue()                     {}

// UnsafePortServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortServiceServer will
// result in compilation errors.
type UnsafePortServiceServer interface {
	mustEmbedUnimplementedPortServiceServer()
}

func RegisterPortServiceServer(s grpc.ServiceRegistrar, srv PortServiceServer) {
	// If the following call pancis, it indicates UnimplementedPortServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PortService_ServiceDesc, srv)
}

func _PortService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Port)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).Create(ctx, req.(*pb.Port))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Port)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).Update(ctx, req.(*pb.Port))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_View_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).View(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Name)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_Name_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).Name(ctx, req.(*pb.Name))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).Delete(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).List(ctx, req.(*PortListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_Link_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).Link(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_Link_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).Link(ctx, req.(*PortLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_Clone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortCloneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).Clone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_Clone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).Clone(ctx, req.(*PortCloneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_ViewWithDeleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).ViewWithDeleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_ViewWithDeleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).ViewWithDeleted(ctx, req.(*pb.Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_Pull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortPullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).Pull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_Pull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).Pull(ctx, req.(*PortPullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortService_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.Port)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortServiceServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PortService_Sync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortServiceServer).Sync(ctx, req.(*pb.Port))
	}
	return interceptor(ctx, in, info, handler)
}

// PortService_ServiceDesc is the grpc.ServiceDesc for PortService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "edges.PortService",
	HandlerType: (*PortServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _PortService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _PortService_Update_Handler,
		},
		{
			MethodName: "View",
			Handler:    _PortService_View_Handler,
		},
		{
			MethodName: "Name",
			Handler:    _PortService_Name_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _PortService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _PortService_List_Handler,
		},
		{
			MethodName: "Link",
			Handler:    _PortService_Link_Handler,
		},
		{
			MethodName: "Clone",
			Handler:    _PortService_Clone_Handler,
		},
		{
			MethodName: "ViewWithDeleted",
			Handler:    _PortService_ViewWithDeleted_Handler,
		},
		{
			MethodName: "Pull",
			Handler:    _PortService_Pull_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _PortService_Sync_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "edges/port_service.proto",
}
