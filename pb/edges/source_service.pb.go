// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v3.12.4
// source: edges/source_service.proto

package edges

import (
	pb "github.com/snple/beacon/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// source
type SourceListRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Page  *pb.Page               `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	// string device_id = 2;
	Tags          string `protobuf:"bytes,3,opt,name=tags,proto3" json:"tags,omitempty"`
	Source        string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceListRequest) Reset() {
	*x = SourceListRequest{}
	mi := &file_edges_source_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceListRequest) ProtoMessage() {}

func (x *SourceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edges_source_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceListRequest.ProtoReflect.Descriptor instead.
func (*SourceListRequest) Descriptor() ([]byte, []int) {
	return file_edges_source_service_proto_rawDescGZIP(), []int{0}
}

func (x *SourceListRequest) GetPage() *pb.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *SourceListRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *SourceListRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type SourceListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *pb.Page               `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Count         uint32                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Source        []*pb.Source           `protobuf:"bytes,3,rep,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceListResponse) Reset() {
	*x = SourceListResponse{}
	mi := &file_edges_source_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceListResponse) ProtoMessage() {}

func (x *SourceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edges_source_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceListResponse.ProtoReflect.Descriptor instead.
func (*SourceListResponse) Descriptor() ([]byte, []int) {
	return file_edges_source_service_proto_rawDescGZIP(), []int{1}
}

func (x *SourceListResponse) GetPage() *pb.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *SourceListResponse) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *SourceListResponse) GetSource() []*pb.Source {
	if x != nil {
		return x.Source
	}
	return nil
}

type SourceLinkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status        int32                  `protobuf:"zigzag32,2,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceLinkRequest) Reset() {
	*x = SourceLinkRequest{}
	mi := &file_edges_source_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceLinkRequest) ProtoMessage() {}

func (x *SourceLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edges_source_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceLinkRequest.ProtoReflect.Descriptor instead.
func (*SourceLinkRequest) Descriptor() ([]byte, []int) {
	return file_edges_source_service_proto_rawDescGZIP(), []int{2}
}

func (x *SourceLinkRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SourceLinkRequest) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type SourceCloneRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // string device_id = 2;
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceCloneRequest) Reset() {
	*x = SourceCloneRequest{}
	mi := &file_edges_source_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceCloneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceCloneRequest) ProtoMessage() {}

func (x *SourceCloneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edges_source_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceCloneRequest.ProtoReflect.Descriptor instead.
func (*SourceCloneRequest) Descriptor() ([]byte, []int) {
	return file_edges_source_service_proto_rawDescGZIP(), []int{3}
}

func (x *SourceCloneRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SourcePullRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	After int64                  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// string device_id = 3;
	Source        string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourcePullRequest) Reset() {
	*x = SourcePullRequest{}
	mi := &file_edges_source_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourcePullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourcePullRequest) ProtoMessage() {}

func (x *SourcePullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edges_source_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourcePullRequest.ProtoReflect.Descriptor instead.
func (*SourcePullRequest) Descriptor() ([]byte, []int) {
	return file_edges_source_service_proto_rawDescGZIP(), []int{4}
}

func (x *SourcePullRequest) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *SourcePullRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SourcePullRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type SourcePullResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	After         int64                  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit         uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Source        []*pb.Source           `protobuf:"bytes,3,rep,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourcePullResponse) Reset() {
	*x = SourcePullResponse{}
	mi := &file_edges_source_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourcePullResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourcePullResponse) ProtoMessage() {}

func (x *SourcePullResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edges_source_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourcePullResponse.ProtoReflect.Descriptor instead.
func (*SourcePullResponse) Descriptor() ([]byte, []int) {
	return file_edges_source_service_proto_rawDescGZIP(), []int{5}
}

func (x *SourcePullResponse) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *SourcePullResponse) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SourcePullResponse) GetSource() []*pb.Source {
	if x != nil {
		return x.Source
	}
	return nil
}

// tag
type TagListRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Page  *pb.Page               `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	// string device_id = 2;
	SourceId      string `protobuf:"bytes,3,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	Tags          string `protobuf:"bytes,4,opt,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagListRequest) Reset() {
	*x = TagListRequest{}
	mi := &file_edges_source_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagListRequest) ProtoMessage() {}

func (x *TagListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edges_source_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagListRequest.ProtoReflect.Descriptor instead.
func (*TagListRequest) Descriptor() ([]byte, []int) {
	return file_edges_source_service_proto_rawDescGZIP(), []int{6}
}

func (x *TagListRequest) GetPage() *pb.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *TagListRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

func (x *TagListRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

type TagListResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          *pb.Page               `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Count         uint32                 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Tag           []*pb.Tag              `protobuf:"bytes,3,rep,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagListResponse) Reset() {
	*x = TagListResponse{}
	mi := &file_edges_source_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagListResponse) ProtoMessage() {}

func (x *TagListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edges_source_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagListResponse.ProtoReflect.Descriptor instead.
func (*TagListResponse) Descriptor() ([]byte, []int) {
	return file_edges_source_service_proto_rawDescGZIP(), []int{7}
}

func (x *TagListResponse) GetPage() *pb.Page {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *TagListResponse) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *TagListResponse) GetTag() []*pb.Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

type TagCloneRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SourceId      string                 `protobuf:"bytes,2,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagCloneRequest) Reset() {
	*x = TagCloneRequest{}
	mi := &file_edges_source_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagCloneRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagCloneRequest) ProtoMessage() {}

func (x *TagCloneRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edges_source_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagCloneRequest.ProtoReflect.Descriptor instead.
func (*TagCloneRequest) Descriptor() ([]byte, []int) {
	return file_edges_source_service_proto_rawDescGZIP(), []int{8}
}

func (x *TagCloneRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TagCloneRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

type TagPullRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	After int64                  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// string device_id = 3;
	SourceId      string `protobuf:"bytes,4,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagPullRequest) Reset() {
	*x = TagPullRequest{}
	mi := &file_edges_source_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagPullRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagPullRequest) ProtoMessage() {}

func (x *TagPullRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edges_source_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagPullRequest.ProtoReflect.Descriptor instead.
func (*TagPullRequest) Descriptor() ([]byte, []int) {
	return file_edges_source_service_proto_rawDescGZIP(), []int{9}
}

func (x *TagPullRequest) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *TagPullRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TagPullRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

type TagPullResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	After         int64                  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit         uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Tag           []*pb.Tag              `protobuf:"bytes,3,rep,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagPullResponse) Reset() {
	*x = TagPullResponse{}
	mi := &file_edges_source_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagPullResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagPullResponse) ProtoMessage() {}

func (x *TagPullResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edges_source_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagPullResponse.ProtoReflect.Descriptor instead.
func (*TagPullResponse) Descriptor() ([]byte, []int) {
	return file_edges_source_service_proto_rawDescGZIP(), []int{10}
}

func (x *TagPullResponse) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *TagPullResponse) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TagPullResponse) GetTag() []*pb.Tag {
	if x != nil {
		return x.Tag
	}
	return nil
}

type TagPullValueRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	After int64                  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// string device_id = 3;
	SourceId      string `protobuf:"bytes,4,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagPullValueRequest) Reset() {
	*x = TagPullValueRequest{}
	mi := &file_edges_source_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagPullValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagPullValueRequest) ProtoMessage() {}

func (x *TagPullValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_edges_source_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagPullValueRequest.ProtoReflect.Descriptor instead.
func (*TagPullValueRequest) Descriptor() ([]byte, []int) {
	return file_edges_source_service_proto_rawDescGZIP(), []int{11}
}

func (x *TagPullValueRequest) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *TagPullValueRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TagPullValueRequest) GetSourceId() string {
	if x != nil {
		return x.SourceId
	}
	return ""
}

type TagPullValueResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	After         int64                  `protobuf:"varint,1,opt,name=after,proto3" json:"after,omitempty"`
	Limit         uint32                 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Tag           []*pb.TagValueUpdated  `protobuf:"bytes,3,rep,name=tag,proto3" json:"tag,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagPullValueResponse) Reset() {
	*x = TagPullValueResponse{}
	mi := &file_edges_source_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagPullValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagPullValueResponse) ProtoMessage() {}

func (x *TagPullValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_edges_source_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagPullValueResponse.ProtoReflect.Descriptor instead.
func (*TagPullValueResponse) Descriptor() ([]byte, []int) {
	return file_edges_source_service_proto_rawDescGZIP(), []int{12}
}

func (x *TagPullValueResponse) GetAfter() int64 {
	if x != nil {
		return x.After
	}
	return 0
}

func (x *TagPullValueResponse) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TagPullValueResponse) GetTag() []*pb.TagValueUpdated {
	if x != nil {
		return x.Tag
	}
	return nil
}

var File_edges_source_service_proto protoreflect.FileDescriptor

var file_edges_source_service_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x65, 0x64,
	0x67, 0x65, 0x73, 0x1a, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x69, 0x63, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x5d, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x6c, 0x0a, 0x12, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x3b, 0x0a,
	0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x24, 0x0a, 0x12, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x57, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x64, 0x0a, 0x12, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x5f, 0x0a, 0x0e, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x22, 0x60, 0x0a, 0x0f, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x22, 0x3e, 0x0a, 0x0f, 0x54, 0x61, 0x67, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x59, 0x0a, 0x0e, 0x54, 0x61, 0x67, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x58, 0x0a,
	0x0f, 0x54, 0x61, 0x67, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x54,
	0x61, 0x67, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x5e, 0x0a, 0x13, 0x54, 0x61, 0x67, 0x50, 0x75,
	0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x69, 0x0a, 0x14, 0x54, 0x61, 0x67, 0x50, 0x75,
	0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x03, 0x74,
	0x61, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x03, 0x74,
	0x61, 0x67, 0x32, 0xe0, 0x03, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0a,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x0a,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x00, 0x12, 0x1c, 0x0a, 0x04,
	0x56, 0x69, 0x65, 0x77, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x00, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x00, 0x12, 0x1e, 0x0a, 0x06, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x18, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65,
	0x64, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x04, 0x4c, 0x69, 0x6e,
	0x6b, 0x12, 0x18, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x70, 0x62,
	0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x05, 0x43, 0x6c, 0x6f,
	0x6e, 0x65, 0x12, 0x19, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e,
	0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x0f, 0x56,
	0x69, 0x65, 0x77, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x06,
	0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x04, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x18, 0x2e, 0x65,
	0x64, 0x67, 0x65, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x20, 0x0a, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x0a, 0x2e, 0x70, 0x62,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42,
	0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x32, 0xe6, 0x08, 0x0a, 0x0a, 0x54, 0x61, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x07,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x1a, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67,
	0x22, 0x00, 0x12, 0x1c, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x07, 0x2e, 0x70,
	0x62, 0x2e, 0x54, 0x61, 0x67, 0x1a, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x22, 0x00,
	0x12, 0x19, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64,
	0x1a, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x22, 0x00, 0x12, 0x1b, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x07, 0x2e,
	0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x22, 0x00, 0x12, 0x1e, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e,
	0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x15, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2e,
	0x54, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x2d, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00,
	0x12, 0x24, 0x0a, 0x0f, 0x56, 0x69, 0x65, 0x77, 0x57, 0x69, 0x74, 0x68, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a, 0x07, 0x2e, 0x70, 0x62,
	0x2e, 0x54, 0x61, 0x67, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x04, 0x50, 0x75, 0x6c, 0x6c, 0x12, 0x15,
	0x2e, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x54, 0x61,
	0x67, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x1d, 0x0a, 0x04, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x07, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67,
	0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x22,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e,
	0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x00, 0x12, 0x26, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x08, 0x2e, 0x70,
	0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0e, 0x53, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x2e, 0x70,
	0x62, 0x2e, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0a,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x09,
	0x56, 0x69, 0x65, 0x77, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x64, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x00, 0x12, 0x23, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a,
	0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x09, 0x50, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x50, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x54,
	0x61, 0x67, 0x50, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x09, 0x53, 0x79, 0x6e, 0x63, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x22,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e,
	0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x00, 0x12, 0x26, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0a, 0x2e, 0x70,
	0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x08, 0x2e, 0x70,
	0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0e, 0x53, 0x65,
	0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x2e, 0x70,
	0x62, 0x2e, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x0a,
	0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x09,
	0x56, 0x69, 0x65, 0x77, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49,
	0x64, 0x1a, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x00, 0x12, 0x23, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x06, 0x2e, 0x70, 0x62, 0x2e, 0x49, 0x64, 0x1a,
	0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x46, 0x0a,
	0x09, 0x50, 0x75, 0x6c, 0x6c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1a, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x73, 0x2e, 0x54, 0x61, 0x67, 0x50, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x73, 0x2e, 0x54,
	0x61, 0x67, 0x50, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x09, 0x53, 0x79, 0x6e, 0x63, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x12, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x61, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x0a, 0x2e, 0x70, 0x62, 0x2e, 0x4d, 0x79, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x42, 0x28,
	0x5a, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6e, 0x70,
	0x6c, 0x65, 0x2f, 0x62, 0x65, 0x61, 0x63, 0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x2f, 0x65, 0x64, 0x67,
	0x65, 0x73, 0x3b, 0x65, 0x64, 0x67, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_edges_source_service_proto_rawDescOnce sync.Once
	file_edges_source_service_proto_rawDescData = file_edges_source_service_proto_rawDesc
)

func file_edges_source_service_proto_rawDescGZIP() []byte {
	file_edges_source_service_proto_rawDescOnce.Do(func() {
		file_edges_source_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_edges_source_service_proto_rawDescData)
	})
	return file_edges_source_service_proto_rawDescData
}

var file_edges_source_service_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_edges_source_service_proto_goTypes = []any{
	(*SourceListRequest)(nil),    // 0: edges.SourceListRequest
	(*SourceListResponse)(nil),   // 1: edges.SourceListResponse
	(*SourceLinkRequest)(nil),    // 2: edges.SourceLinkRequest
	(*SourceCloneRequest)(nil),   // 3: edges.SourceCloneRequest
	(*SourcePullRequest)(nil),    // 4: edges.SourcePullRequest
	(*SourcePullResponse)(nil),   // 5: edges.SourcePullResponse
	(*TagListRequest)(nil),       // 6: edges.TagListRequest
	(*TagListResponse)(nil),      // 7: edges.TagListResponse
	(*TagCloneRequest)(nil),      // 8: edges.TagCloneRequest
	(*TagPullRequest)(nil),       // 9: edges.TagPullRequest
	(*TagPullResponse)(nil),      // 10: edges.TagPullResponse
	(*TagPullValueRequest)(nil),  // 11: edges.TagPullValueRequest
	(*TagPullValueResponse)(nil), // 12: edges.TagPullValueResponse
	(*pb.Page)(nil),              // 13: pb.Page
	(*pb.Source)(nil),            // 14: pb.Source
	(*pb.Tag)(nil),               // 15: pb.Tag
	(*pb.TagValueUpdated)(nil),   // 16: pb.TagValueUpdated
	(*pb.Id)(nil),                // 17: pb.Id
	(*pb.Name)(nil),              // 18: pb.Name
	(*pb.TagValue)(nil),          // 19: pb.TagValue
	(*pb.TagNameValue)(nil),      // 20: pb.TagNameValue
	(*pb.MyBool)(nil),            // 21: pb.MyBool
}
var file_edges_source_service_proto_depIdxs = []int32{
	13, // 0: edges.SourceListRequest.page:type_name -> pb.Page
	13, // 1: edges.SourceListResponse.page:type_name -> pb.Page
	14, // 2: edges.SourceListResponse.source:type_name -> pb.Source
	14, // 3: edges.SourcePullResponse.source:type_name -> pb.Source
	13, // 4: edges.TagListRequest.page:type_name -> pb.Page
	13, // 5: edges.TagListResponse.page:type_name -> pb.Page
	15, // 6: edges.TagListResponse.tag:type_name -> pb.Tag
	15, // 7: edges.TagPullResponse.tag:type_name -> pb.Tag
	16, // 8: edges.TagPullValueResponse.tag:type_name -> pb.TagValueUpdated
	14, // 9: edges.SourceService.Create:input_type -> pb.Source
	14, // 10: edges.SourceService.Update:input_type -> pb.Source
	17, // 11: edges.SourceService.View:input_type -> pb.Id
	18, // 12: edges.SourceService.Name:input_type -> pb.Name
	17, // 13: edges.SourceService.Delete:input_type -> pb.Id
	0,  // 14: edges.SourceService.List:input_type -> edges.SourceListRequest
	2,  // 15: edges.SourceService.Link:input_type -> edges.SourceLinkRequest
	3,  // 16: edges.SourceService.Clone:input_type -> edges.SourceCloneRequest
	17, // 17: edges.SourceService.ViewWithDeleted:input_type -> pb.Id
	4,  // 18: edges.SourceService.Pull:input_type -> edges.SourcePullRequest
	14, // 19: edges.SourceService.Sync:input_type -> pb.Source
	15, // 20: edges.TagService.Create:input_type -> pb.Tag
	15, // 21: edges.TagService.Update:input_type -> pb.Tag
	17, // 22: edges.TagService.View:input_type -> pb.Id
	18, // 23: edges.TagService.Name:input_type -> pb.Name
	17, // 24: edges.TagService.Delete:input_type -> pb.Id
	6,  // 25: edges.TagService.List:input_type -> edges.TagListRequest
	8,  // 26: edges.TagService.Clone:input_type -> edges.TagCloneRequest
	17, // 27: edges.TagService.ViewWithDeleted:input_type -> pb.Id
	9,  // 28: edges.TagService.Pull:input_type -> edges.TagPullRequest
	15, // 29: edges.TagService.Sync:input_type -> pb.Tag
	17, // 30: edges.TagService.GetValue:input_type -> pb.Id
	19, // 31: edges.TagService.SetValue:input_type -> pb.TagValue
	18, // 32: edges.TagService.GetValueByName:input_type -> pb.Name
	20, // 33: edges.TagService.SetValueByName:input_type -> pb.TagNameValue
	17, // 34: edges.TagService.ViewValue:input_type -> pb.Id
	17, // 35: edges.TagService.DeleteValue:input_type -> pb.Id
	11, // 36: edges.TagService.PullValue:input_type -> edges.TagPullValueRequest
	19, // 37: edges.TagService.SyncValue:input_type -> pb.TagValue
	17, // 38: edges.TagService.GetWrite:input_type -> pb.Id
	19, // 39: edges.TagService.SetWrite:input_type -> pb.TagValue
	18, // 40: edges.TagService.GetWriteByName:input_type -> pb.Name
	20, // 41: edges.TagService.SetWriteByName:input_type -> pb.TagNameValue
	17, // 42: edges.TagService.ViewWrite:input_type -> pb.Id
	17, // 43: edges.TagService.DeleteWrite:input_type -> pb.Id
	11, // 44: edges.TagService.PullWrite:input_type -> edges.TagPullValueRequest
	19, // 45: edges.TagService.SyncWrite:input_type -> pb.TagValue
	14, // 46: edges.SourceService.Create:output_type -> pb.Source
	14, // 47: edges.SourceService.Update:output_type -> pb.Source
	14, // 48: edges.SourceService.View:output_type -> pb.Source
	14, // 49: edges.SourceService.Name:output_type -> pb.Source
	21, // 50: edges.SourceService.Delete:output_type -> pb.MyBool
	1,  // 51: edges.SourceService.List:output_type -> edges.SourceListResponse
	21, // 52: edges.SourceService.Link:output_type -> pb.MyBool
	21, // 53: edges.SourceService.Clone:output_type -> pb.MyBool
	14, // 54: edges.SourceService.ViewWithDeleted:output_type -> pb.Source
	5,  // 55: edges.SourceService.Pull:output_type -> edges.SourcePullResponse
	21, // 56: edges.SourceService.Sync:output_type -> pb.MyBool
	15, // 57: edges.TagService.Create:output_type -> pb.Tag
	15, // 58: edges.TagService.Update:output_type -> pb.Tag
	15, // 59: edges.TagService.View:output_type -> pb.Tag
	15, // 60: edges.TagService.Name:output_type -> pb.Tag
	21, // 61: edges.TagService.Delete:output_type -> pb.MyBool
	7,  // 62: edges.TagService.List:output_type -> edges.TagListResponse
	21, // 63: edges.TagService.Clone:output_type -> pb.MyBool
	15, // 64: edges.TagService.ViewWithDeleted:output_type -> pb.Tag
	10, // 65: edges.TagService.Pull:output_type -> edges.TagPullResponse
	21, // 66: edges.TagService.Sync:output_type -> pb.MyBool
	19, // 67: edges.TagService.GetValue:output_type -> pb.TagValue
	21, // 68: edges.TagService.SetValue:output_type -> pb.MyBool
	20, // 69: edges.TagService.GetValueByName:output_type -> pb.TagNameValue
	21, // 70: edges.TagService.SetValueByName:output_type -> pb.MyBool
	16, // 71: edges.TagService.ViewValue:output_type -> pb.TagValueUpdated
	21, // 72: edges.TagService.DeleteValue:output_type -> pb.MyBool
	12, // 73: edges.TagService.PullValue:output_type -> edges.TagPullValueResponse
	21, // 74: edges.TagService.SyncValue:output_type -> pb.MyBool
	19, // 75: edges.TagService.GetWrite:output_type -> pb.TagValue
	21, // 76: edges.TagService.SetWrite:output_type -> pb.MyBool
	20, // 77: edges.TagService.GetWriteByName:output_type -> pb.TagNameValue
	21, // 78: edges.TagService.SetWriteByName:output_type -> pb.MyBool
	16, // 79: edges.TagService.ViewWrite:output_type -> pb.TagValueUpdated
	21, // 80: edges.TagService.DeleteWrite:output_type -> pb.MyBool
	12, // 81: edges.TagService.PullWrite:output_type -> edges.TagPullValueResponse
	21, // 82: edges.TagService.SyncWrite:output_type -> pb.MyBool
	46, // [46:83] is the sub-list for method output_type
	9,  // [9:46] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_edges_source_service_proto_init() }
func file_edges_source_service_proto_init() {
	if File_edges_source_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_edges_source_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_edges_source_service_proto_goTypes,
		DependencyIndexes: file_edges_source_service_proto_depIdxs,
		MessageInfos:      file_edges_source_service_proto_msgTypes,
	}.Build()
	File_edges_source_service_proto = out.File
	file_edges_source_service_proto_rawDesc = nil
	file_edges_source_service_proto_goTypes = nil
	file_edges_source_service_proto_depIdxs = nil
}
