// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: nodes/data_service.proto

package nodes

import (
	context "context"
	pb "github.com/snple/kokomi/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DataService_Upload_FullMethodName    = "/nodes.DataService/Upload"
	DataService_Compile_FullMethodName   = "/nodes.DataService/Compile"
	DataService_Query_FullMethodName     = "/nodes.DataService/Query"
	DataService_QueryById_FullMethodName = "/nodes.DataService/QueryById"
)

// DataServiceClient is the client API for DataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataServiceClient interface {
	Upload(ctx context.Context, in *DataUploadRequest, opts ...grpc.CallOption) (*DataUploadResponse, error)
	Compile(ctx context.Context, in *DataQueryRequest, opts ...grpc.CallOption) (*pb.Message, error)
	Query(ctx context.Context, in *DataQueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[pb.Message], error)
	QueryById(ctx context.Context, in *DataQueryByIdRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[pb.Message], error)
}

type dataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataServiceClient(cc grpc.ClientConnInterface) DataServiceClient {
	return &dataServiceClient{cc}
}

func (c *dataServiceClient) Upload(ctx context.Context, in *DataUploadRequest, opts ...grpc.CallOption) (*DataUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DataUploadResponse)
	err := c.cc.Invoke(ctx, DataService_Upload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) Compile(ctx context.Context, in *DataQueryRequest, opts ...grpc.CallOption) (*pb.Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.Message)
	err := c.cc.Invoke(ctx, DataService_Compile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataServiceClient) Query(ctx context.Context, in *DataQueryRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[pb.Message], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataService_ServiceDesc.Streams[0], DataService_Query_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DataQueryRequest, pb.Message]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataService_QueryClient = grpc.ServerStreamingClient[pb.Message]

func (c *dataServiceClient) QueryById(ctx context.Context, in *DataQueryByIdRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[pb.Message], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DataService_ServiceDesc.Streams[1], DataService_QueryById_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DataQueryByIdRequest, pb.Message]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataService_QueryByIdClient = grpc.ServerStreamingClient[pb.Message]

// DataServiceServer is the server API for DataService service.
// All implementations must embed UnimplementedDataServiceServer
// for forward compatibility.
type DataServiceServer interface {
	Upload(context.Context, *DataUploadRequest) (*DataUploadResponse, error)
	Compile(context.Context, *DataQueryRequest) (*pb.Message, error)
	Query(*DataQueryRequest, grpc.ServerStreamingServer[pb.Message]) error
	QueryById(*DataQueryByIdRequest, grpc.ServerStreamingServer[pb.Message]) error
	mustEmbedUnimplementedDataServiceServer()
}

// UnimplementedDataServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDataServiceServer struct{}

func (UnimplementedDataServiceServer) Upload(context.Context, *DataUploadRequest) (*DataUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedDataServiceServer) Compile(context.Context, *DataQueryRequest) (*pb.Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compile not implemented")
}
func (UnimplementedDataServiceServer) Query(*DataQueryRequest, grpc.ServerStreamingServer[pb.Message]) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedDataServiceServer) QueryById(*DataQueryByIdRequest, grpc.ServerStreamingServer[pb.Message]) error {
	return status.Errorf(codes.Unimplemented, "method QueryById not implemented")
}
func (UnimplementedDataServiceServer) mustEmbedUnimplementedDataServiceServer() {}
func (UnimplementedDataServiceServer) testEmbeddedByValue()                     {}

// UnsafeDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataServiceServer will
// result in compilation errors.
type UnsafeDataServiceServer interface {
	mustEmbedUnimplementedDataServiceServer()
}

func RegisterDataServiceServer(s grpc.ServiceRegistrar, srv DataServiceServer) {
	// If the following call pancis, it indicates UnimplementedDataServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DataService_ServiceDesc, srv)
}

func _DataService_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_Upload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).Upload(ctx, req.(*DataUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_Compile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataServiceServer).Compile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DataService_Compile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataServiceServer).Compile(ctx, req.(*DataQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataService_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DataQueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServiceServer).Query(m, &grpc.GenericServerStream[DataQueryRequest, pb.Message]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataService_QueryServer = grpc.ServerStreamingServer[pb.Message]

func _DataService_QueryById_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DataQueryByIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataServiceServer).QueryById(m, &grpc.GenericServerStream[DataQueryByIdRequest, pb.Message]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DataService_QueryByIdServer = grpc.ServerStreamingServer[pb.Message]

// DataService_ServiceDesc is the grpc.ServiceDesc for DataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nodes.DataService",
	HandlerType: (*DataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _DataService_Upload_Handler,
		},
		{
			MethodName: "Compile",
			Handler:    _DataService_Compile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _DataService_Query_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryById",
			Handler:       _DataService_QueryById_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "nodes/data_service.proto",
}
